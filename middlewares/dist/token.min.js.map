{"version":3,"sources":["token.js"],"names":["dotenv","require","jwt","authenticateToken","req","res","next","config","headers","token","authHeader","split","sendStatus","process","err","user","verify","env","TOKEN_SECRET","generateAccessToken","customername","expiresIn","module"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,UACjBC,IAAMD,QAAQ,gBAKpB,SAASE,kBAAkBC,EAAKC,EAAKC,GAFrCN,IAAOO,EAAPH,EAAAI,QAAA,cAIUC,EAAQC,GAAcA,EAAWC,MAAM,KAAK,GADlD,GAAgB,MAAVD,EAAiBF,OAAJH,EAAYO,WAAA,KAG/BV,IAAIO,OAASA,EAAMI,QAAOR,IAAIO,aAAX,SAAAE,EAAAC,GAEfC,GAAJF,EAAWL,OAAOI,EAAQI,WAAIC,KACtBJ,EAAJC,KAASA,EACLA,MAKZ,SAASI,oBAAoBC,GAA7B,OAASD,IAAAA,KAAAA,CAAAA,KAATC,GAA2CP,QAAAI,IAAAC,aAAA,CAAAG,UAAA,OAlB3CrB,OAASO,SAmBWe,OAAwBT,QAAYK,CAAgBG,kBAAAA,kBAApEF,oBAAAA","file":"token.min.js","sourcesContent":["const dotenv = require('dotenv');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n// get password vars from .env file\r\ndotenv.config();\r\n\r\nfunction authenticateToken(req, res, next) {\r\n    const authHeader = req.headers['authorization']\r\n    const token = authHeader && authHeader.split(' ')[1]\r\n\r\n    if (token == null) return res.sendStatus(401)\r\n\r\n    jwt.verify(token, process.env.TOKEN_SECRET, (err, user) => {\r\n        if (err) return res.sendStatus(403)\r\n        req.user = user\r\n        next()\r\n    })\r\n}\r\n\r\nfunction generateAccessToken(customername) {\r\n    return jwt.sign({ data: customername }, process.env.TOKEN_SECRET, { expiresIn: '1h' });\r\n}\r\n\r\nmodule.exports = {\r\n    authenticateToken,\r\n    generateAccessToken\r\n}\r\n"]}