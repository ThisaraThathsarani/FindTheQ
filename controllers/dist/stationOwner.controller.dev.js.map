{"version":3,"sources":["stationOwner.controller.js"],"names":["Station","require","request","bcrypt","auth","registerStation","req","res","stationid","body","ownername","stationname","phonenumber","address","arrivaltime","finishtime","fueltype","pwd","password","salt","genSaltSync","hashSync","station","save","response","status","send","message","console","log","login","findOne","compareSync","token","generateAccessToken","toJSON","getAllStation","find","stations","json","getOneStation","stationID","params","id","searchStation","value","trim","$regex","$options","then","updateTime","changeTime","findOneAndUpdate","module","exports"],"mappings":"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","sourcesContent":["const Station = require('../models/stationOwner.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerStation = async (req, res) => {\r\n\r\n    const stationid = req.body.stationid;\r\n    const ownername = req.body.ownername;\r\n    const stationname = req.body.stationname;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const fueltype = req.body.fueltype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const station = new Station({\r\n        stationid,\r\n        ownername,\r\n        stationname,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime,\r\n        finishtime,\r\n        fueltype,\r\n        password\r\n    })\r\n\r\n    try{\r\n        let response = await station.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const ownername = req.body.ownername;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const station = await Station.findOne({ ownername: ownername });\r\n        if (station) {\r\n            if (station && bcrypt.compareSync(password, station.password)) {\r\n                const token = auth.generateAccessToken(ownername);\r\n                \r\n                return res.status(200).send({ ...ownername.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst getAllStation = async (req, res) => {\r\n    try {\r\n        let stations = await Station.find();\r\n        if(stations) {\r\n            return res.json(stations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneStation = async (req, res) => {\r\n\r\n    const stationID = req.params.id\r\n\r\n    try {\r\n        let station = await Station.findOne({\r\n           stationID: stationID \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.stationname.trim();\r\n\r\n    try {\r\n        let station = await Station.find();\r\n        if(station) {\r\n            Station.find({ stationname: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const stationid = req.params.stationid;\r\n\r\n    const station = await Station.findOne({ stationid: stationid });\r\n\r\n    const ownername = station.ownername;\r\n    const stationname = station.stationname;\r\n    const address = station.address;\r\n    const phonenumber = station.phonenumber;\r\n\r\n\r\n    const changeTime = {\r\n    stationid : stationid,\r\n    ownername : ownername,\r\n    stationname : stationname,\r\n    phonenumber : phonenumber,\r\n    address : address,\r\n    arrivaltime : req.body.arrivaltime,\r\n    finishtime : req.body.finishtime,\r\n    fueltype : req.body.fueltype,\r\n    }\r\n\r\n    try {\r\n        const response = await Station.findOneAndUpdate({ stationid: stationid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registerStation,\r\n    getAllStation,\r\n    getOneStation,\r\n    searchStation,\r\n    updateTime,\r\n    login\r\n}"],"file":"stationOwner.controller.dev.js"}