{"version":3,"sources":["customer.controller.js"],"names":["Customer","require","request","bcrypt","auth","registerCustomer","req","res","customername","vehicleid","nic","phonenumber","vehicletype","pwd","salt","password","customer","regeneratorRuntime","async","_context","prev","next","body","genSaltSync","hashSync","awrap","save","sent","log","abrupt","status","send","message","t0","isJoined","stop","updateCustomerJoinedStatus","_context2","params","updateOne","$set","console","login","token","_context3","findOne","compareSync","generateAccessToken","_objectSpread","toJSON","updateTime","changeTime","_context4","findOneAndUpdate","getOneUser","_context5","json","module","exports"],"mappings":"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","file":"customer.controller.min.js","sourcesContent":["const Customer = require('../models/customer.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerCustomer = async (req, res) => {\r\n\r\n    const customername = req.body.customername;\r\n    const vehicleid = req.body.vehicleid;\r\n    const nic = req.body.nic;\r\n    const phonenumber = req.body.phonenumber;\r\n    const vehicletype = req.body.vehicletype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const customer = new Customer({\r\n        customername,\r\n        vehicleid,\r\n        nic,\r\n        phonenumber,\r\n        vehicletype,\r\n        password,\r\n        isJoined : false\r\n    })\r\n\r\n    try{\r\n        let response = await customer.save();\r\n        if(response) {\r\n            console.log(\"yes\")\r\n            return res.status(201).send({message: \"New Customer Registered to the Fuel System\"})\r\n        }else {\r\n            console.log(\"no\")\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the customer to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst updateCustomerJoinedStatus = async (req, res) => {\r\n\r\n    const nic = req.params.nic;\r\n    \r\n    try {\r\n        const res = await Customer.updateOne(\r\n            {\"nic\": nic},\r\n            {$set: {\"isJoined\": true }}\r\n        )\r\n        if(res){\r\n            console.log(\"Ok\")\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error while updating user>>\")\r\n    }\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const customername = req.body.customername;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const customer = await Customer.findOne({ customername: customername });\r\n        if (customer) {\r\n            if (customer && bcrypt.compareSync(password, customer.password)) {\r\n                const token = auth.generateAccessToken(customername);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const vehicleid = req.params.vehicleid;\r\n\r\n    const customer = await Customer.findOne({ vehicleid: vehicleid });\r\n\r\n    const password = customer.password;\r\n\r\n    const changeTime = {\r\n        customername : req.body.customername,\r\n        vehicleid : req.body.vehicleid,\r\n        nic : req.body.nic,\r\n        phonenumber : req.body.phonenumber,\r\n        vehicletype : req.body.vehicletype,\r\n        password : password\r\n    }\r\n\r\n    try {\r\n        const response = await Customer.findOneAndUpdate({ vehicleid: vehicleid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneUser = async (req, res) => {\r\n\r\n    const customername = req.params.customername\r\n\r\n    try {\r\n        let customer = await Customer.findOne({\r\n            customername: customername \r\n        });\r\n        if(customer) {\r\n            return res.json(customer)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such customer found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registerCustomer,\r\n    login,\r\n    updateTime,\r\n    getOneUser,\r\n    updateCustomerJoinedStatus\r\n}"]}