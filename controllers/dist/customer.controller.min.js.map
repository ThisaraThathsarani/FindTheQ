{"version":3,"sources":["customer.controller.js"],"names":["Customer","require","request","bcrypt","auth","registerCustomer","req","res","customername","email","vehicleid","nic","phonenumber","vehicletype","pwd","salt","password","customer","regeneratorRuntime","async","_context","prev","next","body","genSaltSync","hashSync","awrap","save","sent","log","abrupt","message","status","send","t0","isJoined","stop","updateCustomerJoinedStatus","_context2","params","updateOne","$set","console","setStatus","_context3","findOne","compareSync","token","generateAccessToken","updateTime","changeTime","_context5","findOneAndUpdate","getOneUser","_context6","json"],"mappings":"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","file":"customer.controller.min.js","sourcesContent":["const Customer = require('../models/customer.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerCustomer = async (req, res) => {\r\n\r\n    const customername = req.body.customername;\r\n    const email = req.body.email;\r\n    const vehicleid = req.body.vehicleid;\r\n    const nic = req.body.nic;\r\n    const phonenumber = req.body.phonenumber;\r\n    const vehicletype = req.body.vehicletype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const customer = new Customer({\r\n        customername,\r\n        email,\r\n        vehicleid,\r\n        nic,\r\n        phonenumber,\r\n        vehicletype,\r\n        password,\r\n        isJoined : false\r\n    })\r\n\r\n    try{\r\n        let response = await customer.save();\r\n        if(response) {\r\n            console.log(\"yes\")\r\n            return res.status(201).send({message: \"New Customer Registered to the Fuel System\"})\r\n        }else {\r\n            console.log(\"no\")\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the customer to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst updateCustomerJoinedStatus = async (req, res) => {\r\n\r\n    const email = req.params.email;\r\n\r\n    try {\r\n        const response = await Customer.updateOne(\r\n            {\"email\": email},\r\n            {$set: {\"isJoined\": true }}\r\n        )\r\n        if(response){\r\n            console.log(\"Ok\")\r\n            return res.status(200).send({ message: true })\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error while updating user>>\")\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst setStatus = async (req, res) => {\r\n\r\n    const email = req.params.email;\r\n\r\n    try {\r\n        const response = await Customer.updateOne(\r\n            {\"email\": email},\r\n            {$set: {\"isJoined\": false }}\r\n        )\r\n        if(response){\r\n            console.log(\"Ok\")\r\n            return res.status(200).send({ message: true })\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error while updating user>>\")\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\n\r\nconst login = async (req, res) => {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const customer = await Customer.findOne({ email: email });\r\n        if (customer) {\r\n            if (customer && bcrypt.compareSync(password, customer.password)) {\r\n                const token = auth.generateAccessToken(email);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const vehicleid = req.params.vehicleid;\r\n\r\n    const customer = await Customer.findOne({ vehicleid: vehicleid });\r\n\r\n    const password = customer.password;\r\n\r\n    const changeTime = {\r\n        customername : req.body.customername,\r\n        vehicleid : req.body.vehicleid,\r\n        nic : req.body.nic,\r\n        phonenumber : req.body.phonenumber,\r\n        vehicletype : req.body.vehicletype,\r\n        password : password\r\n    }\r\n\r\n    try {\r\n        const response = await Customer.findOneAndUpdate({ vehicleid: vehicleid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneUser = async (req, res) => {\r\n\r\n    const email = req.params.email;\r\n\r\n    try {\r\n        let customer = await Customer.findOne({\r\n            email: email \r\n        });\r\n        if(customer) {\r\n            return res.json(customer)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such customer found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registerCustomer,\r\n    login,\r\n    updateTime,\r\n    getOneUser,\r\n    updateCustomerJoinedStatus,\r\n    setStatus\r\n}"]}