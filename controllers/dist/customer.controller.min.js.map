{"version":3,"sources":["customer.controller.js"],"names":["Customer","require","request","bcrypt","auth","registerCustomer","req","res","customername","email","vehicleid","nic","phonenumber","vehicletype","pwd","salt","password","customer","regeneratorRuntime","async","_context","prev","next","body","genSaltSync","hashSync","awrap","save","sent","log","abrupt","message","status","send","t0","isJoined","stop","updateCustomerJoinedStatus","_res","_context2","params","updateOne","$set","console","login","token","_context3","findOne","compareSync","generateAccessToken","_objectSpread","toJSON","updateTime","changeTime","_context4","findOneAndUpdate","getOneUser","_context5","json","module","exports"],"mappings":"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","file":"customer.controller.min.js","sourcesContent":["const Customer = require('../models/customer.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerCustomer = async (req, res) => {\r\n\r\n    const customername = req.body.customername;\r\n    const email = req.body.email;\r\n    const vehicleid = req.body.vehicleid;\r\n    const nic = req.body.nic;\r\n    const phonenumber = req.body.phonenumber;\r\n    const vehicletype = req.body.vehicletype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const customer = new Customer({\r\n        customername,\r\n        email,\r\n        vehicleid,\r\n        nic,\r\n        phonenumber,\r\n        vehicletype,\r\n        password,\r\n        isJoined : false\r\n    })\r\n\r\n    try{\r\n        let response = await customer.save();\r\n        if(response) {\r\n            console.log(\"yes\")\r\n            return res.status(201).send({message: \"New Customer Registered to the Fuel System\"})\r\n        }else {\r\n            console.log(\"no\")\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the customer to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst updateCustomerJoinedStatus = async (req, res) => {\r\n\r\n    const email = req.params.email;\r\n\r\n    try {\r\n        const res = await Customer.updateOne(\r\n            {\"email\": email},\r\n            {$set: {\"isJoined\": true }}\r\n        )\r\n        if(res){\r\n            console.log(\"Ok\")\r\n            return res.status(200).send({ message: 'User Joined to the queue' })\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error while updating user>>\")\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const customer = await Customer.findOne({ email: email });\r\n        if (customer) {\r\n            if (customer && bcrypt.compareSync(password, customer.password)) {\r\n                const token = auth.generateAccessToken(email);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const vehicleid = req.params.vehicleid;\r\n\r\n    const customer = await Customer.findOne({ vehicleid: vehicleid });\r\n\r\n    const password = customer.password;\r\n\r\n    const changeTime = {\r\n        customername : req.body.customername,\r\n        vehicleid : req.body.vehicleid,\r\n        nic : req.body.nic,\r\n        phonenumber : req.body.phonenumber,\r\n        vehicletype : req.body.vehicletype,\r\n        password : password\r\n    }\r\n\r\n    try {\r\n        const response = await Customer.findOneAndUpdate({ vehicleid: vehicleid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneUser = async (req, res) => {\r\n\r\n    const email = req.params.email;\r\n\r\n    try {\r\n        let customer = await Customer.findOne({\r\n            email: email \r\n        });\r\n        if(customer) {\r\n            return res.json(customer)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such customer found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registerCustomer,\r\n    login,\r\n    updateTime,\r\n    getOneUser,\r\n    updateCustomerJoinedStatus\r\n}"]}