{"version":3,"sources":["customer.controller.js"],"names":["Customer","require","request","bcrypt","auth","registerCustomer","req","res","customername","email","vehicleid","nic","phonenumber","vehicletype","pwd","salt","password","customer","regeneratorRuntime","async","_context","prev","next","body","genSaltSync","hashSync","awrap","save","sent","log","abrupt","message","status","send","t0","isJoined","stop","updateCustomerJoinedStatus","_context2","params","updateOne","$set","console","login","token","_context3","findOne","compareSync","generateAccessToken","_objectSpread","toJSON","updateTime","changeTime","_context4","findOneAndUpdate","getOneUser","_context5","json","module","exports"],"mappings":"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","file":"customer.controller.min.js","sourcesContent":["const Customer = require('../models/customer.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerCustomer = async (req, res) => {\r\n\r\n    const customername = req.body.customername;\r\n    const email = req.body.email;\r\n    const vehicleid = req.body.vehicleid;\r\n    const nic = req.body.nic;\r\n    const phonenumber = req.body.phonenumber;\r\n    const vehicletype = req.body.vehicletype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const customer = new Customer({\r\n        customername,\r\n        email,\r\n        vehicleid,\r\n        nic,\r\n        phonenumber,\r\n        vehicletype,\r\n        password,\r\n        isJoined : false\r\n    })\r\n\r\n    try{\r\n        let response = await customer.save();\r\n        if(response) {\r\n            console.log(\"yes\")\r\n            return res.status(201).send({message: \"New Customer Registered to the Fuel System\"})\r\n        }else {\r\n            console.log(\"no\")\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the customer to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst updateCustomerJoinedStatus = async (req, res) => {\r\n\r\n    const email = req.params.email;\r\n\r\n    try {\r\n        const res = await Customer.updateOne(\r\n            {\"email\": email},\r\n            {$set: {\"isJoined\": true }}\r\n        )\r\n        if(res){\r\n            console.log(\"Ok\")\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error while updating user>>\")\r\n    }\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const customer = await Customer.findOne({ email: email });\r\n        if (customer) {\r\n            if (customer && bcrypt.compareSync(password, customer.password)) {\r\n                const token = auth.generateAccessToken(email);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const vehicleid = req.params.vehicleid;\r\n\r\n    const customer = await Customer.findOne({ vehicleid: vehicleid });\r\n\r\n    const password = customer.password;\r\n\r\n    const changeTime = {\r\n        customername : req.body.customername,\r\n        vehicleid : req.body.vehicleid,\r\n        nic : req.body.nic,\r\n        phonenumber : req.body.phonenumber,\r\n        vehicletype : req.body.vehicletype,\r\n        password : password\r\n    }\r\n\r\n    try {\r\n        const response = await Customer.findOneAndUpdate({ vehicleid: vehicleid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneUser = async (req, res) => {\r\n\r\n    const email = req.params.email;\r\n\r\n    try {\r\n        let customer = await Customer.findOne({\r\n            email: email \r\n        });\r\n        if(customer) {\r\n            return res.json(customer)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such customer found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registerCustomer,\r\n    login,\r\n    updateTime,\r\n    getOneUser,\r\n    updateCustomerJoinedStatus\r\n}"]}