{"version":3,"sources":["customer.controller.js"],"names":["Customer","require","request","bcrypt","auth","registerCustomer","req","res","customername","nic","phonenumber","vehicletype","arrivaltime","departtime","fueltype","pwd","salt","password","customer","regeneratorRuntime","async","_context","prev","next","body","genSaltSync","hashSync","awrap","save","sent","log","abrupt","message","status","t0","stop","login","token","_context2","response","findOne","compareSync","generateAccessToken","send","_objectSpread","toJSON","updateTime","changeTime","_context3","params","findOneAndUpdate","getOneUser","_context4","module","exports"],"mappings":"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","file":"customer.controller.min.js","sourcesContent":["const Customer = require('../models/customer.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerCustomer = async (req, res) => {\r\n\r\n    const customername = req.body.customername;\r\n    const nic = req.body.nic;\r\n    const phonenumber = req.body.phonenumber;\r\n    const vehicletype = req.body.vehicletype;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const departtime = req.body.departtime;\r\n    const fueltype = req.body.fueltype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const customer = new Customer({\r\n        customername,\r\n        nic,\r\n        phonenumber,\r\n        vehicletype,\r\n        arrivaltime,\r\n        departtime,\r\n        fueltype,\r\n        password\r\n    })\r\n\r\n    try{\r\n        let response = await customer.save();\r\n        if(response) {\r\n            console.log(\"yes\")\r\n            return res.status(201).send({message: \"New Customer Registered to the Fuel System\"})\r\n        }else {\r\n            console.log(\"no\")\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the customer to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const customername = req.body.customername;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const customer = await Customer.findOne({ customername: customername });\r\n        if (customer) {\r\n            if (customer && bcrypt.compareSync(password, customer.password)) {\r\n                const token = auth.generateAccessToken(customername);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const nic = req.params.nic;\r\n\r\n    const customer = await Customer.findOne({ nic: nic });\r\n\r\n    const password = customer.password;\r\n\r\n    const changeTime = {\r\n        customername : req.body.customername,\r\n        nic : req.body.nic,\r\n        phonenumber : req.body.phonenumber,\r\n        vehicletype : req.body.vehicletype,\r\n        arrivaltime : req.body.arrivaltime,\r\n        departtime : req.body.departtime,\r\n        fueltype : req.body.fueltype,\r\n        password : password\r\n    }\r\n\r\n    try {\r\n        const response = await Customer.findOneAndUpdate({ nic: nic } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneUser = async (req, res) => {\r\n\r\n    const customername = req.params.customername\r\n\r\n    try {\r\n        let customer = await Customer.findOne({\r\n            customername: customername \r\n        });\r\n        if(customer) {\r\n            return res.json(customer)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such customer found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    registerCustomer,\r\n    login,\r\n    updateTime,\r\n    getOneUser\r\n}"]}