{"version":3,"sources":["customer.controller.js"],"names":["Customer","require","request","bcrypt","auth","registerCustomer","req","res","customername","vehicleid","nic","phonenumber","vehicletype","pwd","salt","password","customer","regeneratorRuntime","async","_context","prev","next","body","genSaltSync","hashSync","awrap","sent","abrupt","message","send","t0","stop","login","token","_context2","response","findOne","compareSync","generateAccessToken","status","_objectSpread","toJSON","updateTime","changeTime","_context3","params","findOneAndUpdate","getOneUser","_context4","json"],"mappings":"wuBAAA,IAAMA,SAAWC,QAAQ,qCACLA,QAAQ,WAApBC,iBAAAA,QACFC,OAASF,QAAQ,YACjBG,KAAOH,QAAQ,wBAEfI,iBAAmB,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAEfb,EAAeF,EAAIgB,KAAKd,aAP5BR,EAAkBM,EAACgB,KAAAb,UASfC,EAAMJ,EAAIgB,KAAKZ,IACfC,EATkBL,EAAAgB,KASKX,YATzBT,EAAAA,EAAAA,KAUyBU,YACvBC,EAAMP,EAAIgB,KAAKP,SAEfD,EAAOX,OAAOoB,YAAY,IAX1BR,EAAWZ,OAAAqB,SAAAX,EAArBC,GAEMT,EAAgB,IAAGL,SAAnBK,CAAmBG,aAAAA,EAAAC,UAAAA,EAAAC,IAAAA,EAAAC,YAAAA,EAAAC,YAAAA,EAEfJ,SAAAA,IAFeW,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAAAJ,mBAAAQ,MAMGH,EAAKV,QANR,KAAA,GAAA,GAAAO,EAAAO,KAAA,OASfZ,QAAOX,IAAOoB,OATCJ,EAAAQ,OAAA,SAAApB,EAUJJ,OAAOqB,KAAAA,KAAP,CAAAI,QAVI,gDAAAT,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAajBb,QAAAA,IAAY,MAbKW,EAAAQ,OAAA,SAcjBlB,EAAAA,OAAAA,KAF0BoB,KAAA,CAAAD,QAAA,2BAZT,KAAA,GAAAT,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,MAAA,GAiBjBP,QAAAA,IAAAA,EAAAA,IAjBiBO,EAAAQ,OAAA,SAkBjBZ,EAAAA,OAAAA,KAAAA,KAAAA,CAAAA,QAAAA,6DAlBiB,KAAA,GAAA,IAAA,MAAA,OAAAI,EAAAY,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAC,MAAA,SAAA1B,EAAAC,GAAA,IAAAC,EAAAO,EAAAC,EAAAiB,EAAA,OAAAhB,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAb,MAAA,KAAA,EAAA,OAsBbc,EAtBa7B,EAAAgB,KAAAd,aAwCfO,EAAWT,EAAIgB,KAAKP,SAxCLmB,EAAAd,KAAA,EAAAc,EAAAb,KAAA,EAAAJ,mBAAAQ,MAAAzB,SAAAoC,QAAA,CAAA5B,aAAAA,KAAA,KAAA,EAAA,KAAAQ,EAAAkB,EAAAR,MAAA,CAAAQ,EAAAb,KAAA,GAAA,MAAA,GA6CTL,GAAYb,OAAOkC,YAAYtB,EAAUC,EAASD,UA7CzC,OAwBDkB,EAAZ7B,KAAAkC,oBAAA9B,GAxBa0B,EAAAP,OAAA,SAyByBpB,EAAAgC,OAAA,KAAAV,KAAAW,cAAA,GAAAxB,EAAAyB,SAAA,CAAAR,MAAAA,MAzBzBC,EAAAb,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAa,EAAAP,OAAA,SAAApB,EAAAgC,OAAA,KAAAV,KAAA,CAAAD,QAAA,qDAAA,KAAA,GAAAM,EAAAb,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAa,EAAAP,OAAA,SA4BuBpB,EAAEgC,OAAA,KAAAV,KAAA,CAAAD,QAAA,8BA5BzB,KAAA,GAAAM,EAAAb,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAa,EAAAd,KAAA,GAAAc,EAAAJ,GAAAI,EAAA,MAAA,GAAAA,EAAAP,OAAA,SAAApB,EAAAgC,OAAA,KAAAV,KAAA,CAAAD,QAAA,qDAAA,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAH,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAW,WAAA,SAAApC,EAAAC,GAAA,IAAAE,EAAAO,EAAAD,EAAA4B,EAAA,OAAA1B,mBAAAC,MAAA,SAAA0B,GAAA,OAAA,OAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,KAAA,EAAA,OAAAZ,EAAAH,EAAAuC,OAAApC,UAAAmC,EAAAvB,KAAA,EAAAJ,mBAAAQ,MAAAzB,SAAAoC,QAgCV7B,CAAGE,UAAHA,KAhCU,KAAA,EAAA,OAAAO,EAAA4B,EAAAlB,KAgCWX,EAhCXC,EAAAD,SAAA4B,EAAA,CAAAnC,aAAAF,EAAAgB,KAAAd,aAAAC,UAAAH,EAAAgB,KAAAb,UAAAC,IAAAJ,EAAAgB,KAAAZ,IAAAC,YAAAL,EAAAgB,KAAAX,YAAAC,YAAAN,EAAAgB,KAAAV,YAAzBG,SAAAA,GAAyB6B,EAAAxB,KAAA,EAAAwB,EAAAvB,KAAA,EAAAJ,mBAAAQ,MAsCXzB,SAAA8C,iBAAA,CAAArC,UAAAA,GAAAkC,IAtCW,KAAA,EAAA,GAAAC,EAAAlB,KAAA,OAAAkB,EAAAjB,OAAA,SAsCXpB,EAAAgC,OAAA,KAAAV,KAAA,CAAAD,QAAA,8BAtCWgB,EAAAvB,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAuB,EAAAjB,OAAA,SAwCfZ,EAFIwB,OAEWjB,KAAKP,KAAAA,CAFhBa,QAAA,2BAtCW,KAAA,GAAAgB,EAAAvB,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAuB,EAAAxB,KAAA,GAAAwB,EAAAd,GAAAc,EAAA,MAAA,GAAAA,EAAAjB,OAAA,SA2CyBnB,EAAAA,OAAcA,KAAAA,KAAAA,CAAAA,QAAAA,sBA3CvC,KAAA,GAAA,IAAA,MAAA,OAAAoC,EAAAb,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA6FnBgB,WAAa,SAAOzC,EAAKC,GAAZ,IAAAC,EAAAQ,EAAA,OAAAC,mBAAAC,MAAA,SAAA8B,GAAA,OAAA,OAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,KAAA,EAAA,OAvDLb,EAAAF,EAAAuC,OAAArC,aAuDKwC,EAAA5B,KAAA,EAAA4B,EAAA3B,KAAA,EAAAJ,mBAAAQ,MAKUzB,SAASoC,QAAQ,CA5DhC5B,aAOUA,KAgDL,KAAA,EAAA,GAKPQ,EALOgC,EAAAtB,KAAA,OAAAsB,EAAArB,OAAA,SAvDLpB,EAAA0C,KAAAjC,IAuDKgC,EAAA3B,KAAA,EAAA,MAAA,KAAA,EAAA,OAAA2B,EAAArB,OAAA,SA/CWvB,EAAKkC,OAAAA,KAAAA,KAAAA,CAALV,QAAyBpB,4BA+CpC,KAAA,GAAAwC,EAAA3B,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA2B,EAAA5B,KAAA,GAAA4B,EAAAlB,GAAAkB,EAAA,MAAA,GAAAA,EAAArB,OAAA,SAvDLpB,EAAAgC,OAAA,KAAAV,KAAA,CAAAD,QAAA,2BAuDK,KAAA,GAAA,IAAA,MAAA,OAAAoB,EAAAjB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA1C2BH,OAAAA,QAAAA,CAAFvB,iBAAAA,iBA8DxC2B,MAAAA,MA3EUU,WAAAA,WAAAK,WAAAA","file":"customer.controller.min.js","sourcesContent":["const Customer = require('../models/customer.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerCustomer = async (req, res) => {\r\n\r\n    const customername = req.body.customername;\r\n    const vehicleid = req.body.vehicleid;\r\n    const nic = req.body.nic;\r\n    const phonenumber = req.body.phonenumber;\r\n    const vehicletype = req.body.vehicletype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const customer = new Customer({\r\n        customername,\r\n        vehicleid,\r\n        nic,\r\n        phonenumber,\r\n        vehicletype,\r\n        password\r\n    })\r\n\r\n    try{\r\n        let response = await customer.save();\r\n        if(response) {\r\n            console.log(\"yes\")\r\n            return res.status(201).send({message: \"New Customer Registered to the Fuel System\"})\r\n        }else {\r\n            console.log(\"no\")\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the customer to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const customername = req.body.customername;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const customer = await Customer.findOne({ customername: customername });\r\n        if (customer) {\r\n            if (customer && bcrypt.compareSync(password, customer.password)) {\r\n                const token = auth.generateAccessToken(customername);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const vehicleid = req.params.vehicleid;\r\n\r\n    const customer = await Customer.findOne({ vehicleid: vehicleid });\r\n\r\n    const password = customer.password;\r\n\r\n    const changeTime = {\r\n        customername : req.body.customername,\r\n        vehicleid : req.body.vehicleid,\r\n        nic : req.body.nic,\r\n        phonenumber : req.body.phonenumber,\r\n        vehicletype : req.body.vehicletype,\r\n        password : password\r\n    }\r\n\r\n    try {\r\n        const response = await Customer.findOneAndUpdate({ vehicleid: vehicleid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneUser = async (req, res) => {\r\n\r\n    const customername = req.params.customername\r\n\r\n    try {\r\n        let customer = await Customer.findOne({\r\n            customername: customername \r\n        });\r\n        if(customer) {\r\n            return res.json(customer)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such customer found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    registerCustomer,\r\n    login,\r\n    updateTime,\r\n    getOneUser\r\n}"]}