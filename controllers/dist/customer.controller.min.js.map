{"version":3,"sources":["customer.controller.js"],"names":["Customer","require","request","bcrypt","auth","registerCustomer","req","res","customername","vehicleid","nic","phonenumber","vehicletype","arrivaltime","departtime","fueltype","pwd","salt","password","customer","regeneratorRuntime","async","_context","prev","next","body","genSaltSync","hashSync","awrap","sent","abrupt","send","message","status","t0","stop","login","token","_context2","response","findOne","compareSync","generateAccessToken","_objectSpread","toJSON","updateTime","changeTime","_context3","params","findOneAndUpdate","getOneUser","_context4","json","module","exports"],"mappings":"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","file":"customer.controller.min.js","sourcesContent":["const Customer = require('../models/customer.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerCustomer = async (req, res) => {\r\n\r\n    const customername = req.body.customername;\r\n    const vehicleid = req.body.vehicleid;\r\n    const nic = req.body.nic;\r\n    const phonenumber = req.body.phonenumber;\r\n    const vehicletype = req.body.vehicletype;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const departtime = req.body.departtime;\r\n    const fueltype = req.body.fueltype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const customer = new Customer({\r\n        customername,\r\n        vehicleid,\r\n        nic,\r\n        phonenumber,\r\n        vehicletype,\r\n        arrivaltime,\r\n        departtime,\r\n        fueltype,\r\n        password\r\n    })\r\n\r\n    try{\r\n        let response = await customer.save();\r\n        if(response) {\r\n            console.log(\"yes\")\r\n            return res.status(201).send({message: \"New Customer Registered to the Fuel System\"})\r\n        }else {\r\n            console.log(\"no\")\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the customer to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const customername = req.body.customername;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const customer = await Customer.findOne({ customername: customername });\r\n        if (customer) {\r\n            if (customer && bcrypt.compareSync(password, customer.password)) {\r\n                const token = auth.generateAccessToken(customername);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const vehicleid = req.params.vehicleid;\r\n\r\n    const customer = await Customer.findOne({ vehicleid: vehicleid });\r\n\r\n    const password = customer.password;\r\n\r\n    const changeTime = {\r\n        customername : req.body.customername,\r\n        vehicleid : req.body.vehicleid,\r\n        nic : req.body.nic,\r\n        phonenumber : req.body.phonenumber,\r\n        vehicletype : req.body.vehicletype,\r\n        arrivaltime : req.body.arrivaltime,\r\n        departtime : req.body.departtime,\r\n        fueltype : req.body.fueltype,\r\n        password : password\r\n    }\r\n\r\n    try {\r\n        const response = await Customer.findOneAndUpdate({ vehicleid: vehicleid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneUser = async (req, res) => {\r\n\r\n    const customername = req.params.customername\r\n\r\n    try {\r\n        let customer = await Customer.findOne({\r\n            customername: customername \r\n        });\r\n        if(customer) {\r\n            return res.json(customer)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such customer found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    registerCustomer,\r\n    login,\r\n    updateTime,\r\n    getOneUser\r\n}"]}