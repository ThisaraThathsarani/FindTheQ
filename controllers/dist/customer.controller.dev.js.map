{"version":3,"sources":["customer.controller.js"],"names":["Customer","require","request","bcrypt","auth","registerCustomer","req","res","customername","body","vehicleid","nic","phonenumber","vehicletype","pwd","password","salt","genSaltSync","hashSync","customer","isJoined","save","response","console","log","status","send","message","updateCustomerJoinedStatus","params","updateOne","$set","login","findOne","compareSync","token","generateAccessToken","toJSON","updateTime","changeTime","findOneAndUpdate","getOneUser","json","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAxB;;eACoBA,OAAO,CAAC,SAAD,C;IAAnBC,O,YAAAA,O;;AACR,IAAMC,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,sBAAD,CAApB;;AAEA,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfC,UAAAA,YAFe,GAEAF,GAAG,CAACG,IAAJ,CAASD,YAFT;AAGfE,UAAAA,SAHe,GAGHJ,GAAG,CAACG,IAAJ,CAASC,SAHN;AAIfC,UAAAA,GAJe,GAITL,GAAG,CAACG,IAAJ,CAASE,GAJA;AAKfC,UAAAA,WALe,GAKDN,GAAG,CAACG,IAAJ,CAASG,WALR;AAMfC,UAAAA,WANe,GAMDP,GAAG,CAACG,IAAJ,CAASI,WANR;AAOfC,UAAAA,GAPe,GAOTR,GAAG,CAACG,IAAJ,CAASM,QAPA;AASfC,UAAAA,IATe,GASRb,MAAM,CAACc,WAAP,CAAmB,EAAnB,CATQ;AAUfF,UAAAA,QAVe,GAUJZ,MAAM,CAACe,QAAP,CAAgBJ,GAAhB,EAAqBE,IAArB,CAVI;AAYfG,UAAAA,QAZe,GAYJ,IAAInB,QAAJ,CAAa;AAC1BQ,YAAAA,YAAY,EAAZA,YAD0B;AAE1BE,YAAAA,SAAS,EAATA,SAF0B;AAG1BC,YAAAA,GAAG,EAAHA,GAH0B;AAI1BC,YAAAA,WAAW,EAAXA,WAJ0B;AAK1BC,YAAAA,WAAW,EAAXA,WAL0B;AAM1BE,YAAAA,QAAQ,EAARA,QAN0B;AAO1BK,YAAAA,QAAQ,EAAG;AAPe,WAAb,CAZI;AAAA;AAAA;AAAA,0CAuBID,QAAQ,CAACE,IAAT,EAvBJ;;AAAA;AAuBbC,UAAAA,QAvBa;;AAAA,eAwBdA,QAxBc;AAAA;AAAA;AAAA;;AAyBbC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAzBa,2CA0BNjB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CA1BM;;AAAA;AA4BbJ,UAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AA5Ba,2CA6BNjB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CA7BM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgCjBJ,UAAAA,OAAO,CAACC,GAAR;AAhCiB,2CAiCVjB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CAjCU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;AAuCA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAOtB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEzBI,UAAAA,GAFyB,GAEnBL,GAAG,CAACuB,MAAJ,CAAWlB,GAFQ;AAAA;AAAA;AAAA,0CAKTX,QAAQ,CAAC8B,SAAT,CACd;AAAC,mBAAOnB;AAAR,WADc,EAEd;AAACoB,YAAAA,IAAI,EAAE;AAAC,0BAAY;AAAb;AAAP,WAFc,CALS;;AAAA;AAKrBxB,UAAAA,IALqB;;AAS3B,cAAGA,IAAH,EAAO;AACHgB,YAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH;;AAX0B;AAAA;;AAAA;AAAA;AAAA;AAa3BD,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AAb2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnC;;AAiBA,IAAMQ,KAAK,GAAG,SAARA,KAAQ,CAAO1B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACJC,UAAAA,YADI,GACWF,GAAG,CAACG,IAAJ,CAASD,YADpB;AAEJO,UAAAA,QAFI,GAEOT,GAAG,CAACG,IAAJ,CAASM,QAFhB;AAAA;AAAA;AAAA,0CAKiBf,QAAQ,CAACiC,OAAT,CAAiB;AAAEzB,YAAAA,YAAY,EAAEA;AAAhB,WAAjB,CALjB;;AAAA;AAKAW,UAAAA,QALA;;AAAA,eAMFA,QANE;AAAA;AAAA;AAAA;;AAAA,gBAOEA,QAAQ,IAAIhB,MAAM,CAAC+B,WAAP,CAAmBnB,QAAnB,EAA6BI,QAAQ,CAACJ,QAAtC,CAPd;AAAA;AAAA;AAAA;;AAQQoB,UAAAA,KARR,GAQgB/B,IAAI,CAACgC,mBAAL,CAAyB5B,YAAzB,CARhB;AAAA,4CAUSD,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,mBAA0BP,QAAQ,CAACkB,MAAT,EAA1B;AAA6CF,YAAAA,KAAK,EAALA;AAA7C,aAVT;;AAAA;AAAA,4CAaS5B,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAbT;;AAAA;AAAA;AAAA;;AAAA;AAAA,4CAgBKpB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAhBL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAmBCpB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAnBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AAwBA,IAAMW,UAAU,GAAG,SAAbA,UAAa,CAAOhC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACTG,UAAAA,SADS,GACGJ,GAAG,CAACuB,MAAJ,CAAWnB,SADd;AAAA;AAAA,0CAGQV,QAAQ,CAACiC,OAAT,CAAiB;AAAEvB,YAAAA,SAAS,EAAEA;AAAb,WAAjB,CAHR;;AAAA;AAGTS,UAAAA,QAHS;AAKTJ,UAAAA,QALS,GAKEI,QAAQ,CAACJ,QALX;AAOTwB,UAAAA,UAPS,GAOI;AACf/B,YAAAA,YAAY,EAAGF,GAAG,CAACG,IAAJ,CAASD,YADT;AAEfE,YAAAA,SAAS,EAAGJ,GAAG,CAACG,IAAJ,CAASC,SAFN;AAGfC,YAAAA,GAAG,EAAGL,GAAG,CAACG,IAAJ,CAASE,GAHA;AAIfC,YAAAA,WAAW,EAAGN,GAAG,CAACG,IAAJ,CAASG,WAJR;AAKfC,YAAAA,WAAW,EAAGP,GAAG,CAACG,IAAJ,CAASI,WALR;AAMfE,YAAAA,QAAQ,EAAGA;AANI,WAPJ;AAAA;AAAA;AAAA,0CAiBYf,QAAQ,CAACwC,gBAAT,CAA0B;AAAE9B,YAAAA,SAAS,EAAEA;AAAb,WAA1B,EAAqD6B,UAArD,CAjBZ;;AAAA;AAiBLjB,UAAAA,QAjBK;;AAAA,eAkBRA,QAlBQ;AAAA;AAAA;AAAA;;AAAA,4CAmBAf,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CAnBA;;AAAA;AAAA,4CAsBJpB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAtBI;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CA0BJpB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CA1BI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AA+BA,IAAMc,UAAU,GAAG,SAAbA,UAAa,CAAOnC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAETC,UAAAA,YAFS,GAEMF,GAAG,CAACuB,MAAJ,CAAWrB,YAFjB;AAAA;AAAA;AAAA,0CAKUR,QAAQ,CAACiC,OAAT,CAAiB;AAClCzB,YAAAA,YAAY,EAAEA;AADoB,WAAjB,CALV;;AAAA;AAKPW,UAAAA,QALO;;AAAA,eAQRA,QARQ;AAAA;AAAA;AAAA;;AAAA,4CASAZ,GAAG,CAACmC,IAAJ,CAASvB,QAAT,CATA;;AAAA;AAAA,4CAWAZ,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAcJpB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAdI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAoBAgB,MAAM,CAACC,OAAP,GAAiB;AACbvC,EAAAA,gBAAgB,EAAhBA,gBADa;AAEb2B,EAAAA,KAAK,EAALA,KAFa;AAGbM,EAAAA,UAAU,EAAVA,UAHa;AAIbG,EAAAA,UAAU,EAAVA,UAJa;AAKbb,EAAAA,0BAA0B,EAA1BA;AALa,CAAjB","sourcesContent":["const Customer = require('../models/customer.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerCustomer = async (req, res) => {\r\n\r\n    const customername = req.body.customername;\r\n    const vehicleid = req.body.vehicleid;\r\n    const nic = req.body.nic;\r\n    const phonenumber = req.body.phonenumber;\r\n    const vehicletype = req.body.vehicletype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const customer = new Customer({\r\n        customername,\r\n        vehicleid,\r\n        nic,\r\n        phonenumber,\r\n        vehicletype,\r\n        password,\r\n        isJoined : false\r\n    })\r\n\r\n    try{\r\n        let response = await customer.save();\r\n        if(response) {\r\n            console.log(\"yes\")\r\n            return res.status(201).send({message: \"New Customer Registered to the Fuel System\"})\r\n        }else {\r\n            console.log(\"no\")\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the customer to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst updateCustomerJoinedStatus = async (req, res) => {\r\n\r\n    const nic = req.params.nic;\r\n    \r\n    try {\r\n        const res = await Customer.updateOne(\r\n            {\"nic\": nic},\r\n            {$set: {\"isJoined\": true }}\r\n        )\r\n        if(res){\r\n            console.log(\"Ok\")\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error while updating user>>\")\r\n    }\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const customername = req.body.customername;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const customer = await Customer.findOne({ customername: customername });\r\n        if (customer) {\r\n            if (customer && bcrypt.compareSync(password, customer.password)) {\r\n                const token = auth.generateAccessToken(customername);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const vehicleid = req.params.vehicleid;\r\n\r\n    const customer = await Customer.findOne({ vehicleid: vehicleid });\r\n\r\n    const password = customer.password;\r\n\r\n    const changeTime = {\r\n        customername : req.body.customername,\r\n        vehicleid : req.body.vehicleid,\r\n        nic : req.body.nic,\r\n        phonenumber : req.body.phonenumber,\r\n        vehicletype : req.body.vehicletype,\r\n        password : password\r\n    }\r\n\r\n    try {\r\n        const response = await Customer.findOneAndUpdate({ vehicleid: vehicleid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneUser = async (req, res) => {\r\n\r\n    const customername = req.params.customername\r\n\r\n    try {\r\n        let customer = await Customer.findOne({\r\n            customername: customername \r\n        });\r\n        if(customer) {\r\n            return res.json(customer)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such customer found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registerCustomer,\r\n    login,\r\n    updateTime,\r\n    getOneUser,\r\n    updateCustomerJoinedStatus\r\n}"],"file":"customer.controller.dev.js"}