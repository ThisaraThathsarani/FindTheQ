{"version":3,"sources":["customer.controller.js"],"names":["Customer","require","request","bcrypt","auth","registerCustomer","req","res","customername","body","nic","phonenumber","vehicletype","arrivaltime","departtime","fueltype","pwd","password","salt","genSaltSync","hashSync","customer","save","response","console","log","status","send","message","login","findOne","compareSync","token","generateAccessToken","toJSON","updateTime","params","changeTime","findOneAndUpdate","getOneUser","json","module","exports"],"mappings":"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","sourcesContent":["const Customer = require('../models/customer.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerCustomer = async (req, res) => {\r\n\r\n    const customername = req.body.customername;\r\n    const nic = req.body.nic;\r\n    const phonenumber = req.body.phonenumber;\r\n    const vehicletype = req.body.vehicletype;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const departtime = req.body.departtime;\r\n    const fueltype = req.body.fueltype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const customer = new Customer({\r\n        customername,\r\n        nic,\r\n        phonenumber,\r\n        vehicletype,\r\n        arrivaltime,\r\n        departtime,\r\n        fueltype,\r\n        password\r\n    })\r\n\r\n    try{\r\n        let response = await customer.save();\r\n        if(response) {\r\n            console.log(\"yes\")\r\n            return res.status(201).send({message: \"New Customer Registered to the Fuel System\"})\r\n        }else {\r\n            console.log(\"no\")\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the customer to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const customername = req.body.customername;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const customer = await Customer.findOne({ customername: customername });\r\n        if (customer) {\r\n            if (customer && bcrypt.compareSync(password, customer.password)) {\r\n                const token = auth.generateAccessToken(customername);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const nic = req.params.nic;\r\n\r\n    const customer = await Customer.findOne({ nic: nic });\r\n\r\n    const password = customer.password;\r\n\r\n    const changeTime = {\r\n        customername : req.body.customername,\r\n        nic : req.body.nic,\r\n        phonenumber : req.body.phonenumber,\r\n        vehicletype : req.body.vehicletype,\r\n        arrivaltime : req.body.arrivaltime,\r\n        departtime : req.body.departtime,\r\n        fueltype : req.body.fueltype,\r\n        password : password\r\n    }\r\n\r\n    try {\r\n        const response = await Customer.findOneAndUpdate({ nic: nic } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneUser = async (req, res) => {\r\n\r\n    const customername = req.params.customername\r\n\r\n    try {\r\n        let customer = await Customer.findOne({\r\n            customername: customername \r\n        });\r\n        if(customer) {\r\n            return res.json(customer)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such customer found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    registerCustomer,\r\n    login,\r\n    updateTime,\r\n    getOneUser\r\n}"],"file":"customer.controller.dev.js"}