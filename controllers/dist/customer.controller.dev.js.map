{"version":3,"sources":["customer.controller.js"],"names":["Customer","require","request","bcrypt","auth","registerCustomer","req","res","customername","body","vehicleid","nic","phonenumber","vehicletype","arrivaltime","departtime","fueltype","pwd","password","salt","genSaltSync","hashSync","customer","save","response","console","log","status","send","message","login","findOne","compareSync","token","generateAccessToken","toJSON","updateTime","params","changeTime","findOneAndUpdate","getOneUser","json","module","exports"],"mappings":"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","sourcesContent":["const Customer = require('../models/customer.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerCustomer = async (req, res) => {\r\n\r\n    const customername = req.body.customername;\r\n    const vehicleid = req.body.vehicleid;\r\n    const nic = req.body.nic;\r\n    const phonenumber = req.body.phonenumber;\r\n    const vehicletype = req.body.vehicletype;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const departtime = req.body.departtime;\r\n    const fueltype = req.body.fueltype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const customer = new Customer({\r\n        customername,\r\n        vehicleid,\r\n        nic,\r\n        phonenumber,\r\n        vehicletype,\r\n        arrivaltime,\r\n        departtime,\r\n        fueltype,\r\n        password\r\n    })\r\n\r\n    try{\r\n        let response = await customer.save();\r\n        if(response) {\r\n            console.log(\"yes\")\r\n            return res.status(201).send({message: \"New Customer Registered to the Fuel System\"})\r\n        }else {\r\n            console.log(\"no\")\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the customer to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const customername = req.body.customername;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const customer = await Customer.findOne({ customername: customername });\r\n        if (customer) {\r\n            if (customer && bcrypt.compareSync(password, customer.password)) {\r\n                const token = auth.generateAccessToken(customername);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const vehicleid = req.params.vehicleid;\r\n\r\n    const customer = await Customer.findOne({ vehicleid: vehicleid });\r\n\r\n    const password = customer.password;\r\n\r\n    const changeTime = {\r\n        customername : req.body.customername,\r\n        vehicleid : req.body.vehicleid,\r\n        nic : req.body.nic,\r\n        phonenumber : req.body.phonenumber,\r\n        vehicletype : req.body.vehicletype,\r\n        arrivaltime : req.body.arrivaltime,\r\n        departtime : req.body.departtime,\r\n        fueltype : req.body.fueltype,\r\n        password : password\r\n    }\r\n\r\n    try {\r\n        const response = await Customer.findOneAndUpdate({ vehicleid: vehicleid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneUser = async (req, res) => {\r\n\r\n    const customername = req.params.customername\r\n\r\n    try {\r\n        let customer = await Customer.findOne({\r\n            customername: customername \r\n        });\r\n        if(customer) {\r\n            return res.json(customer)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such customer found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    registerCustomer,\r\n    login,\r\n    updateTime,\r\n    getOneUser\r\n}"],"file":"customer.controller.dev.js"}