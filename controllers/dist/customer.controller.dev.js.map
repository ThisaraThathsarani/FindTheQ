{"version":3,"sources":["customer.controller.js"],"names":["Customer","require","request","bcrypt","auth","registerCustomer","req","res","customername","body","email","vehicleid","nic","phonenumber","vehicletype","pwd","password","salt","genSaltSync","hashSync","customer","isJoined","save","response","console","log","status","send","message","updateCustomerJoinedStatus","params","updateOne","$set","login","findOne","compareSync","token","generateAccessToken","toJSON","updateTime","changeTime","findOneAndUpdate","getOneUser","json","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAxB;;eACoBA,OAAO,CAAC,SAAD,C;IAAnBC,O,YAAAA,O;;AACR,IAAMC,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,sBAAD,CAApB;;AAEA,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfC,UAAAA,YAFe,GAEAF,GAAG,CAACG,IAAJ,CAASD,YAFT;AAGfE,UAAAA,KAHe,GAGPJ,GAAG,CAACG,IAAJ,CAASC,KAHF;AAIfC,UAAAA,SAJe,GAIHL,GAAG,CAACG,IAAJ,CAASE,SAJN;AAKfC,UAAAA,GALe,GAKTN,GAAG,CAACG,IAAJ,CAASG,GALA;AAMfC,UAAAA,WANe,GAMDP,GAAG,CAACG,IAAJ,CAASI,WANR;AAOfC,UAAAA,WAPe,GAODR,GAAG,CAACG,IAAJ,CAASK,WAPR;AAQfC,UAAAA,GARe,GAQTT,GAAG,CAACG,IAAJ,CAASO,QARA;AAUfC,UAAAA,IAVe,GAURd,MAAM,CAACe,WAAP,CAAmB,EAAnB,CAVQ;AAWfF,UAAAA,QAXe,GAWJb,MAAM,CAACgB,QAAP,CAAgBJ,GAAhB,EAAqBE,IAArB,CAXI;AAafG,UAAAA,QAbe,GAaJ,IAAIpB,QAAJ,CAAa;AAC1BQ,YAAAA,YAAY,EAAZA,YAD0B;AAE1BE,YAAAA,KAAK,EAALA,KAF0B;AAG1BC,YAAAA,SAAS,EAATA,SAH0B;AAI1BC,YAAAA,GAAG,EAAHA,GAJ0B;AAK1BC,YAAAA,WAAW,EAAXA,WAL0B;AAM1BC,YAAAA,WAAW,EAAXA,WAN0B;AAO1BE,YAAAA,QAAQ,EAARA,QAP0B;AAQ1BK,YAAAA,QAAQ,EAAG;AARe,WAAb,CAbI;AAAA;AAAA;AAAA,0CAyBID,QAAQ,CAACE,IAAT,EAzBJ;;AAAA;AAyBbC,UAAAA,QAzBa;;AAAA,eA0BdA,QA1Bc;AAAA;AAAA;AAAA;;AA2BbC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AA3Ba,2CA4BNlB,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CA5BM;;AAAA;AA8BbJ,UAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AA9Ba,2CA+BNlB,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CA/BM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkCjBJ,UAAAA,OAAO,CAACC,GAAR;AAlCiB,2CAmCVlB,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CAnCU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;AAyCA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAOvB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEzBG,UAAAA,KAFyB,GAEjBJ,GAAG,CAACwB,MAAJ,CAAWpB,KAFM;AAAA;AAAA;AAAA,0CAKTV,QAAQ,CAAC+B,SAAT,CACd;AAAC,qBAASrB;AAAV,WADc,EAEd;AAACsB,YAAAA,IAAI,EAAE;AAAC,0BAAY;AAAb;AAAP,WAFc,CALS;;AAAA;AAKrBzB,UAAAA,IALqB;;AAAA,eASxBA,IATwB;AAAA;AAAA;AAAA;;AAUvBiB,UAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AAVuB,4CAWhBlB,IAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAXgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAc3BJ,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AAd2B,4CAepBlB,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAfoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnC;;AAmBA,IAAMK,KAAK,GAAG,SAARA,KAAQ,CAAO3B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACJG,UAAAA,KADI,GACIJ,GAAG,CAACG,IAAJ,CAASC,KADb;AAEJM,UAAAA,QAFI,GAEOV,GAAG,CAACG,IAAJ,CAASO,QAFhB;AAAA;AAAA;AAAA,0CAKiBhB,QAAQ,CAACkC,OAAT,CAAiB;AAAExB,YAAAA,KAAK,EAAEA;AAAT,WAAjB,CALjB;;AAAA;AAKAU,UAAAA,QALA;;AAAA,eAMFA,QANE;AAAA;AAAA;AAAA;;AAAA,gBAOEA,QAAQ,IAAIjB,MAAM,CAACgC,WAAP,CAAmBnB,QAAnB,EAA6BI,QAAQ,CAACJ,QAAtC,CAPd;AAAA;AAAA;AAAA;;AAQQoB,UAAAA,KARR,GAQgBhC,IAAI,CAACiC,mBAAL,CAAyB3B,KAAzB,CARhB;AAAA,4CAUSH,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,mBAA0BP,QAAQ,CAACkB,MAAT,EAA1B;AAA6CF,YAAAA,KAAK,EAALA;AAA7C,aAVT;;AAAA;AAAA,4CAaS7B,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAbT;;AAAA;AAAA;AAAA;;AAAA;AAAA,4CAgBKrB,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAhBL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAmBCrB,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAnBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AAwBA,IAAMW,UAAU,GAAG,SAAbA,UAAa,CAAOjC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACTI,UAAAA,SADS,GACGL,GAAG,CAACwB,MAAJ,CAAWnB,SADd;AAAA;AAAA,0CAGQX,QAAQ,CAACkC,OAAT,CAAiB;AAAEvB,YAAAA,SAAS,EAAEA;AAAb,WAAjB,CAHR;;AAAA;AAGTS,UAAAA,QAHS;AAKTJ,UAAAA,QALS,GAKEI,QAAQ,CAACJ,QALX;AAOTwB,UAAAA,UAPS,GAOI;AACfhC,YAAAA,YAAY,EAAGF,GAAG,CAACG,IAAJ,CAASD,YADT;AAEfG,YAAAA,SAAS,EAAGL,GAAG,CAACG,IAAJ,CAASE,SAFN;AAGfC,YAAAA,GAAG,EAAGN,GAAG,CAACG,IAAJ,CAASG,GAHA;AAIfC,YAAAA,WAAW,EAAGP,GAAG,CAACG,IAAJ,CAASI,WAJR;AAKfC,YAAAA,WAAW,EAAGR,GAAG,CAACG,IAAJ,CAASK,WALR;AAMfE,YAAAA,QAAQ,EAAGA;AANI,WAPJ;AAAA;AAAA;AAAA,0CAiBYhB,QAAQ,CAACyC,gBAAT,CAA0B;AAAE9B,YAAAA,SAAS,EAAEA;AAAb,WAA1B,EAAqD6B,UAArD,CAjBZ;;AAAA;AAiBLjB,UAAAA,QAjBK;;AAAA,eAkBRA,QAlBQ;AAAA;AAAA;AAAA;;AAAA,4CAmBAhB,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CAnBA;;AAAA;AAAA,4CAsBJrB,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAtBI;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CA0BJrB,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CA1BI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AA+BA,IAAMc,UAAU,GAAG,SAAbA,UAAa,CAAOpC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAETG,UAAAA,KAFS,GAEDJ,GAAG,CAACwB,MAAJ,CAAWpB,KAFV;AAAA;AAAA;AAAA,0CAKUV,QAAQ,CAACkC,OAAT,CAAiB;AAClCxB,YAAAA,KAAK,EAAEA;AAD2B,WAAjB,CALV;;AAAA;AAKPU,UAAAA,QALO;;AAAA,eAQRA,QARQ;AAAA;AAAA;AAAA;;AAAA,4CASAb,GAAG,CAACoC,IAAJ,CAASvB,QAAT,CATA;;AAAA;AAAA,4CAWAb,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAcJrB,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAdI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAoBAgB,MAAM,CAACC,OAAP,GAAiB;AACbxC,EAAAA,gBAAgB,EAAhBA,gBADa;AAEb4B,EAAAA,KAAK,EAALA,KAFa;AAGbM,EAAAA,UAAU,EAAVA,UAHa;AAIbG,EAAAA,UAAU,EAAVA,UAJa;AAKbb,EAAAA,0BAA0B,EAA1BA;AALa,CAAjB","sourcesContent":["const Customer = require('../models/customer.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerCustomer = async (req, res) => {\r\n\r\n    const customername = req.body.customername;\r\n    const email = req.body.email;\r\n    const vehicleid = req.body.vehicleid;\r\n    const nic = req.body.nic;\r\n    const phonenumber = req.body.phonenumber;\r\n    const vehicletype = req.body.vehicletype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const customer = new Customer({\r\n        customername,\r\n        email,\r\n        vehicleid,\r\n        nic,\r\n        phonenumber,\r\n        vehicletype,\r\n        password,\r\n        isJoined : false\r\n    })\r\n\r\n    try{\r\n        let response = await customer.save();\r\n        if(response) {\r\n            console.log(\"yes\")\r\n            return res.status(201).send({message: \"New Customer Registered to the Fuel System\"})\r\n        }else {\r\n            console.log(\"no\")\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the customer to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst updateCustomerJoinedStatus = async (req, res) => {\r\n\r\n    const email = req.params.email;\r\n\r\n    try {\r\n        const res = await Customer.updateOne(\r\n            {\"email\": email},\r\n            {$set: {\"isJoined\": true }}\r\n        )\r\n        if(res){\r\n            console.log(\"Ok\")\r\n            return res.status(200).send({ message: 'User Joined to the queue' })\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error while updating user>>\")\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const customer = await Customer.findOne({ email: email });\r\n        if (customer) {\r\n            if (customer && bcrypt.compareSync(password, customer.password)) {\r\n                const token = auth.generateAccessToken(email);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const vehicleid = req.params.vehicleid;\r\n\r\n    const customer = await Customer.findOne({ vehicleid: vehicleid });\r\n\r\n    const password = customer.password;\r\n\r\n    const changeTime = {\r\n        customername : req.body.customername,\r\n        vehicleid : req.body.vehicleid,\r\n        nic : req.body.nic,\r\n        phonenumber : req.body.phonenumber,\r\n        vehicletype : req.body.vehicletype,\r\n        password : password\r\n    }\r\n\r\n    try {\r\n        const response = await Customer.findOneAndUpdate({ vehicleid: vehicleid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneUser = async (req, res) => {\r\n\r\n    const email = req.params.email;\r\n\r\n    try {\r\n        let customer = await Customer.findOne({\r\n            email: email \r\n        });\r\n        if(customer) {\r\n            return res.json(customer)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such customer found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registerCustomer,\r\n    login,\r\n    updateTime,\r\n    getOneUser,\r\n    updateCustomerJoinedStatus\r\n}"],"file":"customer.controller.dev.js"}