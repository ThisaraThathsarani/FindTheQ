{"version":3,"sources":["stationOwner.controller.js"],"names":["Station","require","request","bcrypt","auth","registerStation","req","res","stationid","ownername","stationname","phonenumber","address","arrivaltime","finishtime","fueltype","pwd","salt","password","station","regeneratorRuntime","async","_context","prev","next","body","genSaltSync","hashSync","awrap","sent","abrupt","send","message","status","t0","stop","login","token","_context2","findOne","compareSync","generateAccessToken","_objectSpread","getAllStation","stations","_context3","find","console","json","getOneStation","stationID","_context4","params","searchStation","value","_context5","trim","then","changeTime","_context6","findOneAndUpdate","module","exports","updateTime"],"mappings":"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","file":"stationOwner.controller.min.js","sourcesContent":["const Station = require('../models/stationOwner.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerStation = async (req, res) => {\r\n\r\n    const stationid = req.body.stationid;\r\n    const ownername = req.body.ownername;\r\n    const stationname = req.body.stationname;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const fueltype = req.body.fueltype;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const station = new Station({\r\n        stationid,\r\n        ownername,\r\n        stationname,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime,\r\n        finishtime,\r\n        fueltype,\r\n        password\r\n    })\r\n\r\n    try{\r\n        let response = await station.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const ownername = req.body.ownername;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const station = await Station.findOne({ ownername: ownername });\r\n        if (station) {\r\n            if (station && bcrypt.compareSync(password, station.password)) {\r\n                const token = auth.generateAccessToken(ownername);\r\n                \r\n                return res.status(200).send({ ...ownername.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\nconst getAllStation = async (req, res) => {\r\n    try {\r\n        let stations = await Station.find();\r\n        if(stations) {\r\n            return res.json(stations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneStation = async (req, res) => {\r\n\r\n    const stationID = req.params.id\r\n\r\n    try {\r\n        let station = await Station.findOne({\r\n           stationID: stationID \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.stationname.trim();\r\n\r\n    try {\r\n        let station = await Station.find();\r\n        if(station) {\r\n            Station.find({ stationname: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const stationid = req.params.stationid;\r\n\r\n    const station = await Station.findOne({ stationid: stationid });\r\n\r\n    const ownername = station.ownername;\r\n    const stationname = station.stationname;\r\n    const address = station.address;\r\n    const phonenumber = station.phonenumber;\r\n\r\n\r\n    const changeTime = {\r\n    stationid : stationid,\r\n    ownername : ownername,\r\n    stationname : stationname,\r\n    phonenumber : phonenumber,\r\n    address : address,\r\n    arrivaltime : req.body.arrivaltime,\r\n    finishtime : req.body.finishtime,\r\n    fueltype : req.body.fueltype,\r\n    }\r\n\r\n    try {\r\n        const response = await Station.findOneAndUpdate({ stationid: stationid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registerStation,\r\n    getAllStation,\r\n    getOneStation,\r\n    searchStation,\r\n    updateTime,\r\n    login\r\n}"]}