{"version":3,"sources":["stationOwner.controller.js"],"names":["Station","require","request","registerStation","req","res","stationid","ownername","stationname","phonenumber","address","arrivaltime","finishtime","fueltype","station","regeneratorRuntime","async","_context","prev","next","body","awrap","save","sent","abrupt","status","send","message","t0","console","log","stop","getAllStation","stations","_context2","find","json","getOneStation","stationID","_context3","params","id","findOne","value","_context4","trim","$regex","$options","then","updateTime","changeTime","_context5","findOneAndUpdate","module","exports","searchStation"],"mappings":"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","file":"stationOwner.controller.min.js","sourcesContent":["const Station = require('../models/stationOwner.model');\r\nconst { request } = require('express')\r\n\r\nconst registerStation = async (req, res) => {\r\n\r\n    const stationid = req.body.stationid;\r\n    const ownername = req.body.ownername;\r\n    const stationname = req.body.stationname;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const fueltype = req.body.fueltype;\r\n\r\n\r\n    const station = new Station({\r\n        stationid,\r\n        ownername,\r\n        stationname,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime,\r\n        finishtime,\r\n        fueltype\r\n    })\r\n\r\n    try{\r\n        let response = await station.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst getAllStation = async (req, res) => {\r\n    try {\r\n        let stations = await Station.find();\r\n        if(stations) {\r\n            return res.json(stations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneStation = async (req, res) => {\r\n\r\n    const stationID = req.params.id\r\n\r\n    try {\r\n        let station = await Station.findOne({\r\n           stationID: stationID \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.stationname.trim();\r\n\r\n    try {\r\n        let station = await Station.find();\r\n        if(station) {\r\n            Station.find({ stationname: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const stationid = req.params.stationid;\r\n\r\n    const station = await Station.findOne({ stationid: stationid });\r\n\r\n    const ownername = station.ownername;\r\n    const stationname = station.stationname;\r\n    const address = station.address;\r\n    const phonenumber = station.phonenumber;\r\n\r\n\r\n    const changeTime = {\r\n    stationid : stationid,\r\n    ownername : ownername,\r\n    stationname : stationname,\r\n    phonenumber : phonenumber,\r\n    address : address,\r\n    arrivaltime : req.body.arrivaltime,\r\n    finishtime : req.body.finishtime,\r\n    fueltype : req.body.fueltype,\r\n    }\r\n\r\n    try {\r\n        const response = await Station.findOneAndUpdate({ stationid: stationid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registerStation,\r\n    getAllStation,\r\n    getOneStation,\r\n    searchStation,\r\n    updateTime\r\n}"]}