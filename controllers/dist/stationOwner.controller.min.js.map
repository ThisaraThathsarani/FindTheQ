{"version":3,"sources":["stationOwner.controller.js"],"names":["Station","require","request","auth","req","res","stationid","body","ownername","stationname","phonenumber","registerStation","address","arrivaltime","finishtime","fueltype","station","save","status","message","console","log","_context","t0","send","getAllStation","stations","regeneratorRuntime","async","_context2","prev","next","awrap","find","sent","abrupt","json","stop","getOneStation","stationID","_context3","params","id","findOne","searchStation","value","_context4","trim","$regex","$options","then","updateTime","changeTime","_context5","findOneAndUpdate","login"],"mappings":"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","file":"stationOwner.controller.min.js","sourcesContent":["const Station = require('../models/stationOwner.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst registerStation = async (req, res) => {\r\n\r\n    const stationid = req.body.stationid;\r\n    const ownername = req.body.ownername;\r\n    const stationname = req.body.stationname;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const fueltype = req.body.fueltype;\r\n\r\n\r\n    const station = new Station({\r\n        stationid,\r\n        ownername,\r\n        stationname,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime,\r\n        finishtime,\r\n        fueltype\r\n    })\r\n\r\n    try{\r\n        let response = await station.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst getAllStation = async (req, res) => {\r\n    try {\r\n        let stations = await Station.find();\r\n        if(stations) {\r\n            return res.json(stations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneStation = async (req, res) => {\r\n\r\n    const stationID = req.params.id\r\n\r\n    try {\r\n        let station = await Station.findOne({\r\n           stationID: stationID \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.stationname.trim();\r\n\r\n    try {\r\n        let station = await Station.find();\r\n        if(station) {\r\n            Station.find({ stationname: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const stationid = req.params.stationid;\r\n\r\n    const station = await Station.findOne({ stationid: stationid });\r\n\r\n    const ownername = station.ownername;\r\n    const stationname = station.stationname;\r\n    const address = station.address;\r\n    const phonenumber = station.phonenumber;\r\n\r\n\r\n    const changeTime = {\r\n    stationid : stationid,\r\n    ownername : ownername,\r\n    stationname : stationname,\r\n    phonenumber : phonenumber,\r\n    address : address,\r\n    arrivaltime : req.body.arrivaltime,\r\n    finishtime : req.body.finishtime,\r\n    fueltype : req.body.fueltype,\r\n    }\r\n\r\n    try {\r\n        const response = await Station.findOneAndUpdate({ stationid: stationid } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registerStation,\r\n    getAllStation,\r\n    getOneStation,\r\n    searchStation,\r\n    updateTime,\r\n    login\r\n}"]}