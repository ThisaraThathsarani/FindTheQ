{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","bcrypt","auth","StationRegister","req","res","id","body","name","ownername","phonenumber","address","arrivaltime","finishtime","status","stock","queue","pwd","password","salt","genSaltSync","hashSync","fuelStation","save","response","send","message","console","log","login","stationid","findOne","compareSync","token","generateAccessToken","customer","toJSON","getAllFuelStation","find","fuelStations","json","getOneFuelStation","params","station","searchStation","value","trim","$regex","$options","then","stations","searchByAddress","updateStatus","changeStatus","findOneAndUpdate","updatestock","updatelength","updateDetails","getcount","fuealStationData","carCount","Car","vanCount","Van","busCount","Bus","bikeCount","Bike","tukCount","Tuk","allCount","count","getCarCount","getVanCount","getBusCount","getBikeCount","getTukCount","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,WAAW,GAAGC,OAAO,CAAC,yBAAD,CAA3B;;eACoBA,OAAO,CAAC,SAAD,C;IAAnBC,O,YAAAA,O;;AACR,IAAMC,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,sBAAD,CAApB;;AAEA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,UAAAA,EADc,GACTF,GAAG,CAACG,IAAJ,CAASD,EADA;AAEdE,UAAAA,IAFc,GAEPJ,GAAG,CAACG,IAAJ,CAASC,IAFF;AAGdC,UAAAA,SAHc,GAGFL,GAAG,CAACG,IAAJ,CAASE,SAHP;AAIdC,UAAAA,WAJc,GAIAN,GAAG,CAACG,IAAJ,CAASG,WAJT;AAKdC,UAAAA,OALc,GAKJP,GAAG,CAACG,IAAJ,CAASI,OALL;AAMdC,UAAAA,WANc,GAMAR,GAAG,CAACG,IAAJ,CAASK,WANT;AAOdC,UAAAA,UAPc,GAODT,GAAG,CAACG,IAAJ,CAASM,UAPR;AAQdC,UAAAA,MARc,GAQLV,GAAG,CAACG,IAAJ,CAASO,MARJ;AASdC,UAAAA,KATc,GASNX,GAAG,CAACG,IAAJ,CAASQ,KATH;AAUdC,UAAAA,KAVc,GAUNZ,GAAG,CAACG,IAAJ,CAASS,KAVH;AAWdC,UAAAA,GAXc,GAWRb,GAAG,CAACG,IAAJ,CAASW,QAXD;AAadC,UAAAA,IAbc,GAaPlB,MAAM,CAACmB,WAAP,CAAmB,EAAnB,CAbO;AAcdF,UAAAA,QAdc,GAcHjB,MAAM,CAACoB,QAAP,CAAgBJ,GAAhB,EAAqBE,IAArB,CAdG;AAgBdG,UAAAA,WAhBc,GAgBA,IAAIxB,WAAJ,CAAgB;AAChCQ,YAAAA,EAAE,EAAFA,EADgC;AAEhCE,YAAAA,IAAI,EAAJA,IAFgC;AAGhCC,YAAAA,SAAS,EAATA,SAHgC;AAIhCC,YAAAA,WAAW,EAAXA,WAJgC;AAKhCC,YAAAA,OAAO,EAAPA,OALgC;AAMhCC,YAAAA,WAAW,EAAXA,WANgC;AAOhCC,YAAAA,UAAU,EAAVA,UAPgC;AAQhCC,YAAAA,MAAM,EAANA,MARgC;AAShCC,YAAAA,KAAK,EAALA,KATgC;AAUhCC,YAAAA,KAAK,EAALA,KAVgC;AAWhCE,YAAAA,QAAQ,EAARA;AAXgC,WAAhB,CAhBA;AAAA;AAAA;AAAA,0CA+BKI,WAAW,CAACC,IAAZ,EA/BL;;AAAA;AA+BZC,UAAAA,QA/BY;;AAAA,eAgCbA,QAhCa;AAAA;AAAA;AAAA;;AAAA,2CAiCLnB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CAjCK;;AAAA;AAAA,2CAmCLrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CAnCK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsChBC,UAAAA,OAAO,CAACC,GAAR;AAtCgB,2CAuCTvB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CAvCS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AA8CA,IAAMG,KAAK,GAAG,SAARA,KAAQ,CAAOzB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACJyB,UAAAA,SADI,GACQ1B,GAAG,CAACG,IAAJ,CAASuB,SADjB;AAEJZ,UAAAA,QAFI,GAEOd,GAAG,CAACG,IAAJ,CAASW,QAFhB;AAAA;AAAA;AAAA,0CAKoBpB,WAAW,CAACiC,OAAZ,CAAoB;AAAED,YAAAA,SAAS,EAAEA;AAAb,WAApB,CALpB;;AAAA;AAKAR,UAAAA,WALA;;AAAA,eAMFA,WANE;AAAA;AAAA;AAAA;;AAAA,gBAOEA,WAAW,IAAIrB,MAAM,CAAC+B,WAAP,CAAmBd,QAAnB,EAA6BI,WAAW,CAACJ,QAAzC,CAPjB;AAAA;AAAA;AAAA;;AAQQe,UAAAA,KARR,GAQgB/B,IAAI,CAACgC,mBAAL,CAAyBJ,SAAzB,CARhB;AAAA,4CAUSzB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,mBAA0BU,QAAQ,CAACC,MAAT,EAA1B;AAA6CH,YAAAA,KAAK,EAALA;AAA7C,aAVT;;AAAA;AAAA,4CAaS5B,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAbT;;AAAA;AAAA;AAAA;;AAAA;AAAA,4CAgBKrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAhBL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAmBCrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAnBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AAyBA,IAAMW,iBAAiB,GAAG,SAApBA,iBAAoB,CAAOjC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEOP,WAAW,CAACwC,IAAZ,EAFP;;AAAA;AAEdC,UAAAA,YAFc;;AAAA,eAGfA,YAHe;AAAA;AAAA;AAAA;;AAAA,4CAIPlC,GAAG,CAACmC,IAAJ,CAASD,YAAT,CAJO;;AAAA;AAAA,4CAMPlC,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CANO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CASXrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CATW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAaA,IAAMe,iBAAiB,GAAG,SAApBA,iBAAoB,CAAOrC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,UAAAA,EADgB,GACXF,GAAG,CAACsC,MAAJ,CAAWpC,EADA;AAAA;AAAA;AAAA,0CAIER,WAAW,CAACiC,OAAZ,CAAoB;AACpCD,YAAAA,SAAS,EAAExB;AADyB,WAApB,CAJF;;AAAA;AAIdqC,UAAAA,OAJc;;AAAA,eAOfA,OAPe;AAAA;AAAA;AAAA;;AAAA,4CAQPtC,GAAG,CAACmC,IAAJ,CAASG,OAAT,CARO;;AAAA;AAAA,4CAUPtC,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAVO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAaXrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAbW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAiBA,IAAMkB,aAAa,GAAG,SAAhBA,aAAgB,CAAOxC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACdwC,UAAAA,KADc,GACNzC,GAAG,CAACsC,MAAJ,CAAWlC,IAAX,CAAgBsC,IAAhB,EADM;AAAA;AAAA;AAAA,0CAIMhD,WAAW,CAACwC,IAAZ,EAJN;;AAAA;AAIVK,UAAAA,OAJU;;AAAA,eAKXA,OALW;AAAA;AAAA;AAAA;;AAMV7C,UAAAA,WAAW,CAACwC,IAAZ,CAAiB;AAAE9B,YAAAA,IAAI,EAAE;AAAEuC,cAAAA,MAAM,EAAE,MAAMF,KAAN,GAAc,IAAxB;AAA8BG,cAAAA,QAAQ,EAAE;AAAxC;AAAR,WAAjB,EAA0EC,IAA1E,CAA+E,UAACC,QAAD,EAAc;AACzF7C,YAAAA,GAAG,CAACmC,IAAJ,CAASU,QAAT;AAEH,WAHD;AANU;AAAA;;AAAA;AAAA,4CAWH7C,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAXG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAcPrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAdO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;;AAkBA,IAAMyB,eAAe,GAAG,SAAlBA,eAAkB,CAAO/C,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBwC,UAAAA,KADgB,GACRzC,GAAG,CAACsC,MAAJ,CAAW/B,OAAX,CAAmBmC,IAAnB,EADQ;AAAA;AAAA;AAAA,0CAIIhD,WAAW,CAACwC,IAAZ,EAJJ;;AAAA;AAIZK,UAAAA,OAJY;;AAAA,eAKbA,OALa;AAAA;AAAA;AAAA;;AAMZ7C,UAAAA,WAAW,CAACwC,IAAZ,CAAiB;AAAE3B,YAAAA,OAAO,EAAE;AAAEoC,cAAAA,MAAM,EAAE,MAAMF,KAAN,GAAc,IAAxB;AAA8BG,cAAAA,QAAQ,EAAE;AAAxC;AAAX,WAAjB,EAA6EC,IAA7E,CAAkF,UAACC,QAAD,EAAc;AAC5F7C,YAAAA,GAAG,CAACmC,IAAJ,CAASU,QAAT;AAEH,WAHD;AANY;AAAA;;AAAA;AAAA,4CAWL7C,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAXK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAcTrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAdS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAkBA,IAAM0B,YAAY,GAAG,SAAfA,YAAe,CAAOhD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,UAAAA,EADW,GACNF,GAAG,CAACsC,MAAJ,CAAWpC,EADL;AAAA;AAAA,0CAGSR,WAAW,CAACiC,OAAZ,CAAoB;AAACD,YAAAA,SAAS,EAAGxB;AAAb,WAApB,CAHT;;AAAA;AAGXgB,UAAAA,WAHW;AAKXd,UAAAA,IALW,GAKJc,WAAW,CAACd,IALR;AAMXC,UAAAA,SANW,GAMCa,WAAW,CAACb,SANb;AAOXC,UAAAA,WAPW,GAOGY,WAAW,CAACZ,WAPf;AAQXC,UAAAA,OARW,GAQDW,WAAW,CAACX,OARX;AASXC,UAAAA,WATW,GASGU,WAAW,CAACV,WATf;AAUXC,UAAAA,UAVW,GAUES,WAAW,CAACT,UAVd;AAWXE,UAAAA,KAXW,GAWHO,WAAW,CAACP,KAXT;AAYXC,UAAAA,KAZW,GAYHM,WAAW,CAACN,KAZT;AAcXqC,UAAAA,YAdW,GAcI;AACjB/C,YAAAA,EAAE,EAAGA,EADY;AAEjBE,YAAAA,IAAI,EAAGA,IAFU;AAGjBC,YAAAA,SAAS,EAAGA,SAHK;AAIjBC,YAAAA,WAAW,EAAGA,WAJG;AAKjBC,YAAAA,OAAO,EAAGA,OALO;AAMjBC,YAAAA,WAAW,EAAGA,WANG;AAOjBC,YAAAA,UAAU,EAAGA,UAPI;AAQjBC,YAAAA,MAAM,EAAGV,GAAG,CAACG,IAAJ,CAASO,MARD;AASjBC,YAAAA,KAAK,EAAGA,KATS;AAUjBC,YAAAA,KAAK,EAAEA;AAVU,WAdJ;AAAA;AAAA;AAAA,0CA6BUlB,WAAW,CAACwD,gBAAZ,CAA6B;AAAExB,YAAAA,SAAS,EAAExB;AAAb,WAA7B,EAAiD+C,YAAjD,CA7BV;;AAAA;AA6BP7B,UAAAA,QA7BO;;AAAA,eA8BVA,QA9BU;AAAA;AAAA;AAAA;;AAAA,4CA+BFnB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CA/BE;;AAAA;AAAA,4CAkCNrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAlCM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAsCNrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAtCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AA2CA,IAAM6B,WAAW,GAAG,SAAdA,WAAc,CAAOnD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,UAAAA,EADU,GACLF,GAAG,CAACsC,MAAJ,CAAWpC,EADN;AAAA;AAAA,0CAGUR,WAAW,CAACiC,OAAZ,CAAoB;AAACzB,YAAAA,EAAE,EAAGA;AAAN,WAApB,CAHV;;AAAA;AAGVgB,UAAAA,WAHU;AAKVd,UAAAA,IALU,GAKHc,WAAW,CAACd,IALT;AAMVC,UAAAA,SANU,GAMEa,WAAW,CAACb,SANd;AAOVC,UAAAA,WAPU,GAOIY,WAAW,CAACZ,WAPhB;AAQVC,UAAAA,OARU,GAQAW,WAAW,CAACX,OARZ;AASVC,UAAAA,WATU,GASIU,WAAW,CAACV,WAThB;AAUVC,UAAAA,UAVU,GAUGS,WAAW,CAACT,UAVf;AAWVC,UAAAA,MAXU,GAWDQ,WAAW,CAACR,MAXX;AAYVE,UAAAA,KAZU,GAYFM,WAAW,CAACN,KAZV;AAcVqC,UAAAA,YAdU,GAcK;AACjB/C,YAAAA,EAAE,EAAGA,EADY;AAEjBE,YAAAA,IAAI,EAAGA,IAFU;AAGjBC,YAAAA,SAAS,EAAGA,SAHK;AAIjBC,YAAAA,WAAW,EAAGA,WAJG;AAKjBC,YAAAA,OAAO,EAAGA,OALO;AAMjBC,YAAAA,WAAW,EAAGA,WANG;AAOjBC,YAAAA,UAAU,EAAGA,UAPI;AAQjBC,YAAAA,MAAM,EAAGA,MARQ;AASjBC,YAAAA,KAAK,EAAGX,GAAG,CAACG,IAAJ,CAASQ,KATA;AAUjBC,YAAAA,KAAK,EAAEA;AAVU,WAdL;AAAA;AAAA;AAAA,0CA6BWlB,WAAW,CAACwD,gBAAZ,CAA6B;AAAExB,YAAAA,SAAS,EAAExB;AAAb,WAA7B,EAAiD+C,YAAjD,CA7BX;;AAAA;AA6BN7B,UAAAA,QA7BM;;AAAA,eA8BTA,QA9BS;AAAA;AAAA;AAAA;;AAAA,4CA+BDnB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CA/BC;;AAAA;AAAA,4CAkCLrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAlCK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAsCLrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAtCK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AA2CA,IAAM8B,YAAY,GAAG,SAAfA,YAAe,CAAOpD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,UAAAA,EADW,GACNF,GAAG,CAACsC,MAAJ,CAAWpC,EADL;AAAA;AAAA,0CAGSR,WAAW,CAACiC,OAAZ,CAAoB;AAACzB,YAAAA,EAAE,EAAGA;AAAN,WAApB,CAHT;;AAAA;AAGXgB,UAAAA,WAHW;AAKXd,UAAAA,IALW,GAKJc,WAAW,CAACd,IALR;AAMXC,UAAAA,SANW,GAMCa,WAAW,CAACb,SANb;AAOXC,UAAAA,WAPW,GAOGY,WAAW,CAACZ,WAPf;AAQXC,UAAAA,OARW,GAQDW,WAAW,CAACX,OARX;AASXC,UAAAA,WATW,GASGU,WAAW,CAACV,WATf;AAUXC,UAAAA,UAVW,GAUES,WAAW,CAACT,UAVd;AAWXC,UAAAA,MAXW,GAWFQ,WAAW,CAACR,MAXV;AAYXC,UAAAA,KAZW,GAYHO,WAAW,CAACP,KAZT;AAcXsC,UAAAA,YAdW,GAcI;AACjB/C,YAAAA,EAAE,EAAGA,EADY;AAEjBE,YAAAA,IAAI,EAAGA,IAFU;AAGjBC,YAAAA,SAAS,EAAGA,SAHK;AAIjBC,YAAAA,WAAW,EAAGA,WAJG;AAKjBC,YAAAA,OAAO,EAAGA,OALO;AAMjBC,YAAAA,WAAW,EAAGA,WANG;AAOjBC,YAAAA,UAAU,EAAGA,UAPI;AAQjBC,YAAAA,MAAM,EAAGA,MARQ;AASjBC,YAAAA,KAAK,EAAGA,KATS;AAUjBC,YAAAA,KAAK,EAAEZ,GAAG,CAACG,IAAJ,CAASS;AAVC,WAdJ;AAAA;AAAA;AAAA,0CA6BUlB,WAAW,CAACwD,gBAAZ,CAA6B;AAAEhD,YAAAA,EAAE,EAAEA;AAAN,WAA7B,EAA0C+C,YAA1C,CA7BV;;AAAA;AA6BP7B,UAAAA,QA7BO;;AAAA,eA8BVA,QA9BU;AAAA;AAAA;AAAA;;AAAA,4CA+BFnB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CA/BE;;AAAA;AAAA,4CAkCNrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAlCM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAsCNrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAtCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AA2CA,IAAM+B,aAAa,GAAG,SAAhBA,aAAgB,CAAOrD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,UAAAA,EADY,GACPF,GAAG,CAACsC,MAAJ,CAAWpC,EADJ;AAAA;AAAA,0CAGQR,WAAW,CAACiC,OAAZ,CAAoB;AAACzB,YAAAA,EAAE,EAAGA;AAAN,WAApB,CAHR;;AAAA;AAGZgB,UAAAA,WAHY;AAKZd,UAAAA,IALY,GAKLc,WAAW,CAACd,IALP;AAMZC,UAAAA,SANY,GAMAa,WAAW,CAACb,SANZ;AAOZC,UAAAA,WAPY,GAOEY,WAAW,CAACZ,WAPd;AAQZC,UAAAA,OARY,GAQFW,WAAW,CAACX,OARV;AASZC,UAAAA,WATY,GASEU,WAAW,CAACV,WATd;AAUZC,UAAAA,UAVY,GAUCS,WAAW,CAACT,UAVb;AAWZG,UAAAA,KAXY,GAWJM,WAAW,CAACN,KAXR;AAaZqC,UAAAA,YAbY,GAaG;AACjB/C,YAAAA,EAAE,EAAGA,EADY;AAEjBE,YAAAA,IAAI,EAAGA,IAFU;AAGjBC,YAAAA,SAAS,EAAGA,SAHK;AAIjBC,YAAAA,WAAW,EAAGA,WAJG;AAKjBC,YAAAA,OAAO,EAAGA,OALO;AAMjBC,YAAAA,WAAW,EAAGA,WANG;AAOjBC,YAAAA,UAAU,EAAGA,UAPI;AAQjBC,YAAAA,MAAM,EAAGV,GAAG,CAACG,IAAJ,CAASO,MARD;AASjBC,YAAAA,KAAK,EAAGX,GAAG,CAACG,IAAJ,CAASQ,KATA;AAUjBC,YAAAA,KAAK,EAAEA;AAVU,WAbH;AAAA;AAAA;AAAA,0CA4BSlB,WAAW,CAACwD,gBAAZ,CAA6B;AAAEhD,YAAAA,EAAE,EAAEA;AAAN,WAA7B,EAA0C+C,YAA1C,CA5BT;;AAAA;AA4BR7B,UAAAA,QA5BQ;;AAAA,eA6BXA,QA7BW;AAAA;AAAA;AAAA;;AAAA,6CA8BHnB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CA9BG;;AAAA;AAAA,6CAiCPrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAjCO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAqCPrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CArCO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;;AA0CA,IAAMgC,QAAQ,GAAG,SAAXA,QAAW,CAAOtD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACTwC,UAAAA,KADS,GACDzC,GAAG,CAACsC,MAAJ,CAAWpC,EAAX,CAAcwC,IAAd,EADC;AAEbnB,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAFa;AAAA;AAAA,0CAKoB9B,WAAW,CAACiC,OAAZ,CAAoB;AAACzB,YAAAA,EAAE,EAAGuC;AAAN,WAApB,CALpB;;AAAA;AAKLc,UAAAA,gBALK;;AAAA,eAONA,gBAPM;AAAA;AAAA;AAAA;;AASDC,UAAAA,QATC,GASUD,gBAAgB,CAAC3C,KAAjB,CAAuB6C,GATjC;AAUDC,UAAAA,QAVC,GAUUH,gBAAgB,CAAC3C,KAAjB,CAAuB+C,GAVjC;AAWDC,UAAAA,QAXC,GAWUL,gBAAgB,CAAC3C,KAAjB,CAAuBiD,GAXjC;AAYDC,UAAAA,SAZC,GAYWP,gBAAgB,CAAC3C,KAAjB,CAAuBmD,IAZlC;AAaDC,UAAAA,QAbC,GAaUT,gBAAgB,CAAC3C,KAAjB,CAAuBqD,GAbjC;AAgBDC,UAAAA,QAhBC,GAgBUV,QAAQ,GAAGE,QAAX,GAAsBE,QAAtB,GAAiCE,SAAjC,GAA6CE,QAhBvD,EAkBL;AACA;AACA;AACA;AACA;AACA;AACA;;AAxBK,6CA0BC/D,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAC8C,YAAAA,KAAK,EAAGD;AAAT,WAArB,CA1BD;;AAAA;AAAA,6CA6BEjE,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CA7BF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAgCFrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAhCE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAoCA,IAAM8C,WAAW,GAAG,SAAdA,WAAc,CAAOpE,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACZwC,UAAAA,KADY,GACJzC,GAAG,CAACsC,MAAJ,CAAWpC,EAAX,CAAcwC,IAAd,EADI;AAAA;AAAA;AAAA,0CAKiBhD,WAAW,CAACiC,OAAZ,CAAoB;AAACzB,YAAAA,EAAE,EAAGuC;AAAN,WAApB,CALjB;;AAAA;AAKRc,UAAAA,gBALQ;;AAAA,eAOTA,gBAPS;AAAA;AAAA;AAAA;;AASJC,UAAAA,QATI,GASOD,gBAAgB,CAAC3C,KAAjB,CAAuB6C,GAT9B;AAAA,6CAWFxD,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAC8C,YAAAA,KAAK,EAAGX;AAAT,WAArB,CAXE;;AAAA;AAAA,6CAcDvD,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAdC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAiBLrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAjBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAqBA,IAAM+C,WAAW,GAAG,SAAdA,WAAc,CAAOrE,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACZwC,UAAAA,KADY,GACJzC,GAAG,CAACsC,MAAJ,CAAWpC,EAAX,CAAcwC,IAAd,EADI;AAAA;AAAA;AAAA,0CAKiBhD,WAAW,CAACiC,OAAZ,CAAoB;AAACzB,YAAAA,EAAE,EAAGuC;AAAN,WAApB,CALjB;;AAAA;AAKRc,UAAAA,gBALQ;;AAAA,eAOTA,gBAPS;AAAA;AAAA;AAAA;;AASJG,UAAAA,QATI,GASOH,gBAAgB,CAAC3C,KAAjB,CAAuB+C,GAT9B;AAAA,6CAWF1D,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAC8C,YAAAA,KAAK,EAAGT;AAAT,WAArB,CAXE;;AAAA;AAAA,6CAcDzD,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAdC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAiBLrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAjBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAqBA,IAAMgD,WAAW,GAAG,SAAdA,WAAc,CAAOtE,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACZwC,UAAAA,KADY,GACJzC,GAAG,CAACsC,MAAJ,CAAWpC,EAAX,CAAcwC,IAAd,EADI;AAAA;AAAA;AAAA,0CAKiBhD,WAAW,CAACiC,OAAZ,CAAoB;AAACzB,YAAAA,EAAE,EAAGuC;AAAN,WAApB,CALjB;;AAAA;AAKRc,UAAAA,gBALQ;;AAAA,eAOTA,gBAPS;AAAA;AAAA;AAAA;;AASJK,UAAAA,QATI,GASOL,gBAAgB,CAAC3C,KAAjB,CAAuBiD,GAT9B;AAAA,6CAWF5D,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAC8C,YAAAA,KAAK,EAAGP;AAAT,WAArB,CAXE;;AAAA;AAAA,6CAcD3D,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAdC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAiBLrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAjBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAqBA,IAAMiD,YAAY,GAAG,SAAfA,YAAe,CAAOvE,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACbwC,UAAAA,KADa,GACLzC,GAAG,CAACsC,MAAJ,CAAWpC,EAAX,CAAcwC,IAAd,EADK;AAAA;AAAA;AAAA,0CAKgBhD,WAAW,CAACiC,OAAZ,CAAoB;AAACzB,YAAAA,EAAE,EAAGuC;AAAN,WAApB,CALhB;;AAAA;AAKTc,UAAAA,gBALS;;AAAA,eAOVA,gBAPU;AAAA;AAAA;AAAA;;AASLO,UAAAA,SATK,GASOP,gBAAgB,CAAC3C,KAAjB,CAAuBmD,IAT9B;AAAA,6CAWH9D,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAC8C,YAAAA,KAAK,EAAGL;AAAT,WAArB,CAXG;;AAAA;AAAA,6CAcF7D,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAdE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAiBNrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAjBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAqBA,IAAMkD,WAAW,GAAG,SAAdA,WAAc,CAAOxE,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACZwC,UAAAA,KADY,GACJzC,GAAG,CAACsC,MAAJ,CAAWpC,EAAX,CAAcwC,IAAd,EADI;AAAA;AAAA;AAAA,0CAKiBhD,WAAW,CAACiC,OAAZ,CAAoB;AAACzB,YAAAA,EAAE,EAAGuC;AAAN,WAApB,CALjB;;AAAA;AAKRc,UAAAA,gBALQ;;AAAA,eAOTA,gBAPS;AAAA;AAAA;AAAA;;AASJS,UAAAA,QATI,GASOT,gBAAgB,CAAC3C,KAAjB,CAAuBqD,GAT9B;AAAA,6CAWFhE,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAC8C,YAAAA,KAAK,EAAGH;AAAT,WAArB,CAXE;;AAAA;AAAA,6CAcD/D,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAdC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAiBLrB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAjBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAsBAmD,MAAM,CAACC,OAAP,GAAiB;AACb3E,EAAAA,eAAe,EAAfA,eADa;AAEbkC,EAAAA,iBAAiB,EAAjBA,iBAFa;AAGbI,EAAAA,iBAAiB,EAAjBA,iBAHa;AAIbG,EAAAA,aAAa,EAAbA,aAJa;AAKbO,EAAAA,eAAe,EAAfA,eALa;AAMbC,EAAAA,YAAY,EAAZA,YANa;AAObG,EAAAA,WAAW,EAAXA,WAPa;AAQbC,EAAAA,YAAY,EAAZA,YARa;AASbC,EAAAA,aAAa,EAAbA,aATa;AAUbC,EAAAA,QAAQ,EAARA,QAVa;AAWbc,EAAAA,WAAW,EAAXA,WAXa;AAYbC,EAAAA,WAAW,EAAXA,WAZa;AAabC,EAAAA,WAAW,EAAXA,WAba;AAcbC,EAAAA,YAAY,EAAZA,YAda;AAebC,EAAAA,WAAW,EAAXA,WAfa;AAgBb/C,EAAAA,KAAK,EAALA;AAhBa,CAAjB","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime,\r\n        finishtime,\r\n        status,\r\n        stock,\r\n        queue,\r\n        password\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst login = async (req, res) => {\r\n    const stationid = req.body.stationid;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const fuelStation = await FuelStation.findOne({ stationid: stationid });\r\n        if (fuelStation) {\r\n            if (fuelStation && bcrypt.compareSync(password, fuelStation.password)) {\r\n                const token = auth.generateAccessToken(stationid);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n\r\nconst getAllFuelStation = async (req,res) =>{\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if(fuelStations) {\r\n            return res.json(fuelStations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: req.body.queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n         \r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n           return res.status(200).send({count : allCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n           return res.status(200).send({count : carCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n           return res.status(200).send({count : vanCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n           return res.status(200).send({count : busCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n           return res.status(200).send({count : bikeCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getTukCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n           return res.status(200).send({count : tukCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount,\r\n    login\r\n    \r\n}"],"file":"station.controller.dev.js"}