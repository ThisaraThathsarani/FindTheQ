{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","bcrypt","auth","StationRegister","req","res","id","body","name","ownername","phonenumber","address","arrivaltime","finishtime","status","stock","queue","pwd","password","salt","genSaltSync","hashSync","fuelStation","diesel","petrol","Car","Van","Bus","Bike","Tuk","save","response","send","message","console","log","login","stationid","findOne","compareSync","token","generateAccessToken","customer","toJSON","getAllFuelStation","find","fuelStations","json","getOneFuelStation","params","station","searchStation","value","trim","$regex","$options","then","stations","searchByAddress","updateStatus","changeStatus","findOneAndUpdate","updatestock","updatelength","updateArrivalTime","updateFinishTime","updateDetails","getcount","fuealStationData","carCount","vanCount","busCount","bikeCount","tukCount","allCount","count","getCarCount","getVanCount","getBusCount","getBikeCount","getTukCount","module","exports"],"mappings":"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","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime : 0,\r\n        finishtime : 0,\r\n        status : 0,\r\n        stock : {diesel :0 , petrol: 0},\r\n        queue : {Car :0 , Van: 0 , Bus: 0 , Bike: 0 , Tuk: 0},\r\n        password\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst login = async (req, res) => {\r\n    const stationid = req.body.stationid;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const fuelStation = await FuelStation.findOne({ stationid: stationid });\r\n        if (fuelStation) {\r\n            if (fuelStation && bcrypt.compareSync(password, fuelStation.password)) {\r\n                const token = auth.generateAccessToken(stationid);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n\r\nconst getAllFuelStation = async (req,res) =>{\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if(fuelStations) {\r\n            return res.json(fuelStations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: req.body.queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateArrivalTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : req.body.arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateFinishTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : req.body.finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n         \r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n           return res.status(200).send({count : allCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n           return res.status(200).send({count : carCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n           return res.status(200).send({count : vanCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n           return res.status(200).send({count : busCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n           return res.status(200).send({count : bikeCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getTukCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n           return res.status(200).send({count : tukCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount,\r\n    login,\r\n    updateArrivalTime,\r\n    updateFinishTime\r\n    \r\n}"],"file":"station.controller.dev.js"}