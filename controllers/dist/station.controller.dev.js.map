{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","StationRegister","req","res","id","body","name","ownername","phonenumber","address","arrivaltime","finishtime","status","stock","queue","Number","fuelStation","save","response","send","message","console","log","getAllFuelStation","find","fuelStations","json","getOneFuelStation","params","findOne","stationid","station","searchStation","value","trim","$regex","$options","then","stations","searchByAddress","updateStatus","changeStatus","findOneAndUpdate","updatestock","updatelength","updateDetails","getcount","fuealStationData","carCount","Car","vanCount","Van","busCount","Bus","bikeCount","Bike","tukCount","Tuk","allCount","count","getCarCount","getVanCount","getBusCount","getBikeCount","getTukCount","module","exports"],"mappings":"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","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = Number(req.body.queue);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime,\r\n        finishtime,\r\n        status,\r\n        stock,\r\n        queue\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst getAllFuelStation = async (req,res) =>{\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if(fuelStations) {\r\n            return res.json(fuelStations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: req.body.queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n         \r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n           return res.status(200).send({count : allCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n           return res.status(200).send({count : carCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n           return res.status(200).send({count : vanCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n           return res.status(200).send({count : busCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n           return res.status(200).send({count : bikeCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getTukCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n           return res.status(200).send({count : tukCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount\r\n    \r\n}"],"file":"station.controller.dev.js"}