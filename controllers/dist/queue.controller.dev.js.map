{"version":3,"sources":["queue.controller.js"],"names":["Queue","require","request","registerQueue","req","res","stationname","body","arrivaltime","leavetime","status","vehicleType","queue","save","response","send","message","console","log","updateTime","ID","params","id","changeTime","findOneAndUpdate","deletequeue","queueid","findOneAndDelete","customer","getcount","value","trim","find","count","$regex","$options","then","queues","json","getcountststus","module","exports"],"mappings":"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","sourcesContent":["const Queue = require('../models/queue.model');\r\nconst { request } = require('express')\r\n\r\nconst registerQueue = async (req, res) => {\r\n\r\n    const stationname = req.body.stationname;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const leavetime = req.body.leavetime;\r\n    const status = req.body.status;\r\n    const vehicleType = req.body.vehicleType;\r\n\r\n\r\n    const queue = new Queue({\r\n        stationname,\r\n        arrivaltime,\r\n        leavetime,\r\n        status,\r\n        vehicleType\r\n\r\n    })\r\n\r\n    try{\r\n        let response = await queue.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New customer added to the queue\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while entering the queue\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const ID = req.params.id;\r\n\r\n    const changeTime = {\r\n        stationname : req.body.stationname,\r\n        arrivaltime : req.body.arrivaltime,\r\n        leavetime : req.body.leavetime,\r\n        status : req.body.status,\r\n        vehicleType : req.body.vehicleType,\r\n    }\r\n\r\n    try {\r\n        const response = await Queue.findOneAndUpdate({ ID: ID } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\nconst deletequeue = async (req, res) => {\r\n    const queueid = req.params.queueid;\r\n\r\n    try {\r\n        const customer = await Queue.findOneAndDelete({ queueid:queueid });\r\n        if(customer){\r\n\r\n         return res.status(204).send({ message: 'Successfully deleted A User from queue' });\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not remove the queue' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.vehicleType.trim();\r\n\r\n    try {\r\n        let queue = await Queue.find();\r\n        if(queue){\r\n            Queue.count({vehicleType: {$regex: \"^\" + value + \".*\", $options: 'i' } }).then((queues) => {\r\n                res.json(queues)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getcountststus = async (req, res) => {\r\n    let value = req.params.status.trim();\r\n\r\n    try {\r\n        let queue = await Queue.find();\r\n        if(queue){\r\n            Queue.count({status: {$regex: \"^\" + value + \".*\", $options: 'i' } }).then((queues) => {\r\n                res.json(queues)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such user in the queue' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    registerQueue,\r\n    deletequeue,\r\n    getcount,\r\n    updateTime,\r\n    getcountststus\r\n}"],"file":"queue.controller.dev.js"}