{"version":3,"sources":["queue.controller.js"],"names":["Queue","require","request","registerQueue","req","res","stationname","body","arrivaltime","leavetime","status","vehicleType","queue","save","response","send","message","console","log","deletequeue","queueid","params","findOneAndDelete","customer","getcount","value","trim","find","count","$regex","$options","then","queues","json","module","exports"],"mappings":"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","sourcesContent":["const Queue = require('../models/queue.model');\r\nconst { request } = require('express')\r\n\r\nconst registerQueue = async (req, res) => {\r\n\r\n    const stationname = req.body.stationname;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const leavetime = req.body.leavetime;\r\n    const status = req.body.status;\r\n    const vehicleType = req.body.vehicleType;\r\n\r\n\r\n    const queue = new Queue({\r\n        stationname,\r\n        arrivaltime,\r\n        leavetime,\r\n        status,\r\n        vehicleType\r\n\r\n    })\r\n\r\n    try{\r\n        let response = await queue.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New customer added to the queue\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while entering the queue\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst deletequeue = async (req, res) => {\r\n    const queueid = req.params.queueid;\r\n\r\n    try {\r\n        const customer = await Queue.findOneAndDelete({ queueid:queueid });\r\n        if(customer){\r\n\r\n         return res.status(204).send({ message: 'Successfully deleted A User from queue' });\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not remove the queue' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.vehicleType.trim();\r\n\r\n    try {\r\n        let queue = await Queue.find();\r\n        if(queue){\r\n            Queue.count({vehicleType: {$regex: \"^\" + value + \".*\", $options: 'i' } }).then((queues) => {\r\n                res.json(queues)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    registerQueue,\r\n    deletequeue,\r\n    getcount\r\n}"],"file":"queue.controller.dev.js"}