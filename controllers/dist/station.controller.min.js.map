{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","StationRegister","req","res","id","name","ownername","phonenumber","address","arrivaltime","finishtime","status","stock","queue","fuelStation","regeneratorRuntime","async","_context","prev","next","body","awrap","save","sent","abrupt","send","message","t0","console","log","stop","getAllFuelStation","fuelStations","_context2","find","json","getOneFuelStation","station","_context3","params","findOne","stationid","searchStation","value","_context4","trim","$regex","$options","then","stations","searchByAddress","_context5","changeStatus","_context6","findOneAndUpdate","updatestock","_context7","updatelength","_context8","updateDetails","_context9","updateStatus","getcount","fuealStationData","carCount","vanCount","busCount","bikeCount","tukCount","allCount","_context10","Car","Van","Bus","Bike","Tuk","count","response","_context11","parseInt","getVanCount","_context12","getBusCount","_context13","_context15","module","exports","getTukCount"],"mappings":"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","file":"station.controller.min.js","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime,\r\n        finishtime,\r\n        status,\r\n        stock,\r\n        queue\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst getAllFuelStation = async (req,res) =>{\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if(fuelStations) {\r\n            return res.json(fuelStations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: req.body.queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = parseInt(fuealStationData.queue.Car);\r\n            let vanCount = parseInt(fuealStationData.queue.Van);\r\n            let busCount = parseInt(fuealStationData.queue.Bus);\r\n            let bikeCount = parseInt(fuealStationData.queue.Bike);\r\n            let tukCount = parseInt(fuealStationData.queue.Tuk);\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n         \r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n           return res.status(200).send({count : allCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = parseInt(fuealStationData.queue.Car);\r\n\r\n           return res.status(200).send({count : carCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let vanCount = parseInt(fuealStationData.queue.Van);\r\n\r\n           return res.status(200).send({count : vanCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let busCount = parseInt(fuealStationData.queue.Bus);\r\n\r\n           return res.status(200).send({count : busCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let bikeCount = parseInt(fuealStationData.queue.Bike);\r\n\r\n           return res.status(200).send({count : bikeCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getTukCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let tukCount = parseInt(fuealStationData.queue.Tuk);\r\n\r\n           return res.status(200).send({count : tukCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount\r\n    \r\n}"]}