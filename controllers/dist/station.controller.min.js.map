{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","bcrypt","auth","StationRegister","req","res","id","name","ownername","phonenumber","address","pwd","salt","password","fuelStation","regeneratorRuntime","async","_context","prev","next","body","arrivaltime","finishtime","status","stock","queue","genSaltSync","hashSync","diesel","Car","Van","Bus","Bike","Tuk","awrap","save","sent","abrupt","send","message","t0","stop","compareSync","token","generateAccessToken","_objectSpread","toJSON","fuelStations","_context3","find","json","getOneFuelStation","station","_context4","params","findOne","stationid","login","value","trim","$regex","$options","then","stations","searchByAddress","_context6","changeStatus","_context7","getAllFuelStation","findOneAndUpdate","updatestock","_context8","petrol","updatelength","_context9","searchStation","car","van","bus","bike","tuk","updateArrivalTime","_context10","updateFinishTime","_context11","updateStatus","_context12","response","updateStation","_context13","console","log","carCount","fuealStationData","vanCount","busCount","bikeCount","allCount","tukCount","count","getCarCount","_context15","getVanCount","_context16","getBikeCount","_context18","getTukCount","_context19"],"mappings":"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","file":"station.controller.min.js","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime : \"-\",\r\n        finishtime : \"-\",\r\n        status : \"Available\",\r\n        stock : {diesel :0 , petrol: 0},\r\n        queue : {Car :0 , Van: 0 , Bus: 0 , Bike: 0 , Tuk: 0},\r\n        password\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst login = async (req, res) => {\r\n    const id = req.body.id;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const fuelStation = await FuelStation.findOne({ id: id });\r\n        if (fuelStation) {\r\n            if (fuelStation && bcrypt.compareSync(password, fuelStation.password)) {\r\n                const token = auth.generateAccessToken(id);\r\n                \r\n                return res.status(200).send({ ...fuelStation.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n\r\nconst getAllFuelStation = async (req,res) =>{\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if(fuelStations) {\r\n            return res.json(fuelStations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        //stock : req.body.stock,\r\n        stock : {\r\n            diesel: req.body.stock.diesel,\r\n            petrol: req.body.stock.petrol\r\n        },\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: {\r\n            Car: req.body.queue.car,\r\n            Van: req.body.queue.van,\r\n            Bus: req.body.queue.bus,\r\n            Bike: req.body.queue.bike,\r\n            Tuk: req.body.queue.tuk\r\n        },\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateArrivalTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : req.body.arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateFinishTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : req.body.finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n         \r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n           return res.status(200).send({count : allCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n           return res.status(200).send({count : carCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n           return res.status(200).send({count : vanCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n           return res.status(200).send({count : busCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n           return res.status(200).send({count : bikeCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getTukCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n           return res.status(200).send({count : tukCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount,\r\n    login,\r\n    updateArrivalTime,\r\n    updateFinishTime\r\n    \r\n}"]}