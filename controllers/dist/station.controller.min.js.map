{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","bcrypt","auth","StationRegister","req","res","id","name","ownername","phonenumber","address","arrivaltime","finishtime","status","stock","queue","pwd","salt","password","fuelStation","regeneratorRuntime","async","_context","prev","next","body","genSaltSync","hashSync","awrap","save","sent","abrupt","send","message","t0","stop","login","stationid","token","_context2","findOne","compareSync","generateAccessToken","_objectSpread","toJSON","getAllFuelStation","fuelStations","_context3","json","getOneFuelStation","station","_context4","params","searchStation","value","_context5","trim","find","then","stations","_context6","$regex","$options","updateStatus","changeStatus","_context7","findOneAndUpdate","updatestock","_context8","updatelength","_context9","getcount","fuealStationData","carCount","vanCount","busCount","bikeCount","tukCount","allCount","_context11","console","log","Car","Van","Bus","Bike","Tuk","count","getCarCount","_context12","getBikeCount","_context15","getTukCount","_context16","updateDetails","getBusCount","response"],"mappings":"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","file":"station.controller.min.js","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime,\r\n        finishtime,\r\n        status,\r\n        stock,\r\n        queue,\r\n        password\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst login = async (req, res) => {\r\n    const stationid = req.body.stationid;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const fuelStation = await FuelStation.findOne({ stationid: stationid });\r\n        if (fuelStation) {\r\n            if (fuelStation && bcrypt.compareSync(password, fuelStation.password)) {\r\n                const token = auth.generateAccessToken(stationid);\r\n                \r\n                return res.status(200).send({ ...customer.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n\r\nconst getAllFuelStation = async (req,res) =>{\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if(fuelStations) {\r\n            return res.json(fuelStations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: req.body.queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n         \r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n           return res.status(200).send({count : allCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n           return res.status(200).send({count : carCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n           return res.status(200).send({count : vanCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n           return res.status(200).send({count : busCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n           return res.status(200).send({count : bikeCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getTukCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n           return res.status(200).send({count : tukCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount,\r\n    login\r\n    \r\n}"]}