{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","bcrypt","auth","StationRegister","req","res","id","name","ownername","phonenumber","address","pwd","salt","password","fuelStation","regeneratorRuntime","async","_context","prev","next","body","arrivaltime","finishtime","status","stock","queue","genSaltSync","hashSync","diesel","Car","Van","Bus","Bike","Tuk","awrap","save","sent","abrupt","send","message","t0","stop","compareSync","token","generateAccessToken","_objectSpread","toJSON","fuelStations","_context3","find","json","getOneFuelStation","station","_context4","params","findOne","stationid","value","trim","$regex","$options","then","stations","searchByAddress","_context6","updateStatus","changeStatus","_context7","getAllFuelStation","findOneAndUpdate","updatestock","_context8","console","log","petrol","updatelength","_context9","searchStation","car","van","bus","bike","tuk","updateArrivalTime","_context10","_context11","_context12","response","getcount","fuealStationData","carCount","vanCount","busCount","bikeCount","tukCount","allCount","_context13","_context14","count","getVanCount","_context15","getBusCount","_context16","getBikeCount","_context17","module","exports","updateDetails","getCarCount","login","updateFinishTime"],"mappings":"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","file":"station.controller.min.js","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\n//Station registration\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime : \"-\",\r\n        finishtime : \"-\",\r\n        status : \"Available\",\r\n        stock : {diesel :0 , petrol: 0},\r\n        queue : {Car :0 , Van: 0 , Bus: 0 , Bike: 0 , Tuk: 0},\r\n        password\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if (response) {\r\n            return res.status(201).send({ message: \"New Station Registered to the Fuel System\" })\r\n        } else {\r\n            return res.status(500).send({ message: \"Internal server error\" });\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({ message: \"Error while registering the station to the application\" })\r\n\r\n    }\r\n\r\n}\r\n\r\n//station owner login\r\nconst login = async (req, res) => {\r\n    const id = req.body.id;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const fuelStation = await FuelStation.findOne({ id: id });\r\n        if (fuelStation) {\r\n            if (fuelStation && bcrypt.compareSync(password, fuelStation.password)) {\r\n                const token = auth.generateAccessToken(id);\r\n\r\n                return res.status(200).send({ ...fuelStation.toJSON(), token });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n//get all fuel station\r\nconst getAllFuelStation = async (req, res) => {\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if (fuelStations) {\r\n            return res.json(fuelStations)\r\n        } else {\r\n            return res.status(404).send({ message: 'Error on retrieving station' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id\r\n        });\r\n        if (station) {\r\n            return res.json(station)\r\n        } else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//search station by name\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if (station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n\r\n            })\r\n        } else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//search station by address\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if (station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n\r\n            })\r\n        } else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//update status by station id\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ stationid: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: finishtime,\r\n        status: req.body.status,\r\n        stock: stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//update stock details\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    console.log(req.body)\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : {\r\n            diesel: req.body.stock.diesel,\r\n            petrol: req.body.stock.petrol\r\n        },\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n  \r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//update queue length\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: finishtime,\r\n        status: status,\r\n        stock: stock,\r\n        queue: {\r\n            Car: req.body.queue.car,\r\n            Van: req.body.queue.van,\r\n            Bus: req.body.queue.bus,\r\n            Bike: req.body.queue.bike,\r\n            Tuk: req.body.queue.tuk\r\n        },\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//update arrival time \r\nconst updateArrivalTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: req.body.arrivaltime,\r\n        finishtime: finishtime,\r\n        status: status,\r\n        stock: stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//update finish time\r\nconst updateFinishTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: req.body.finishtime,\r\n        status: status,\r\n        stock: stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//update station details\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: finishtime,\r\n        status: req.body.status,\r\n        stock: req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//get vehicle count\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n\r\n            return res.status(200).send({ count: allCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//get Car count\r\nconst getCarCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n            return res.status(200).send({ count: carCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//get Van count\r\nconst getVanCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n            return res.status(200).send({ count: vanCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//get bus count\r\nconst getBusCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n            return res.status(200).send({ count: busCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//get bike count\r\nconst getBikeCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n            return res.status(200).send({ count: bikeCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//get tuke count\r\nconst getTukCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n            return res.status(200).send({ count: tukCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount,\r\n    login,\r\n    updateArrivalTime,\r\n    updateFinishTime\r\n\r\n}"]}