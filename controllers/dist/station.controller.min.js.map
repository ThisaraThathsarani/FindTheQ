{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","bcrypt","auth","StationRegister","req","res","id","name","ownername","phonenumber","address","pwd","salt","password","fuelStation","regeneratorRuntime","async","_context","prev","next","body","arrivaltime","finishtime","status","stock","queue","genSaltSync","hashSync","diesel","Car","Bus","Bike","Tuk","awrap","save","sent","abrupt","send","message","t0","stop","Van","compareSync","token","generateAccessToken","_objectSpread","toJSON","fuelStations","_context3","find","json","getOneFuelStation","station","_context4","params","findOne","stationid","value","trim","$regex","$options","then","stations","searchByAddress","_context6","updateStatus","changeStatus","_context7","getAllFuelStation","findOneAndUpdate","updatestock","_context8","petrol","updatelength","_context9","searchStation","car","van","bus","bike","tuk","updateArrivalTime","_context10","updateFinishTime","_context11","_context12","response","getcount","fuealStationData","carCount","vanCount","busCount","bikeCount","tukCount","allCount","_context13","console","log","count","_context14","getVanCount","_context15","getBusCount","_context16","_context17","module","exports","updateDetails","getCarCount","getBikeCount","getTukCount","login"],"mappings":"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","file":"station.controller.min.js","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\n//Station registration\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime: \"-\",\r\n        finishtime: \"-\",\r\n        status: \"Available\",\r\n        stock: { diesel: 0, petrol: 0 },\r\n        queue: { Car: 0, Van: 0, Bus: 0, Bike: 0, Tuk: 0 },\r\n        password\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if (response) {\r\n            return res.status(201).send({ message: \"New Station Registered to the Fuel System\" })\r\n        } else {\r\n            return res.status(500).send({ message: \"Internal server error\" });\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({ message: \"Error while registering the station to the application\" })\r\n\r\n    }\r\n\r\n}\r\n\r\n//station owner login\r\nconst login = async (req, res) => {\r\n    const id = req.body.id;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const fuelStation = await FuelStation.findOne({ id: id });\r\n        if (fuelStation) {\r\n            if (fuelStation && bcrypt.compareSync(password, fuelStation.password)) {\r\n                const token = auth.generateAccessToken(id);\r\n\r\n                return res.status(200).send({ ...fuelStation.toJSON(), token });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n//get all fuel station\r\nconst getAllFuelStation = async (req, res) => {\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if (fuelStations) {\r\n            return res.json(fuelStations)\r\n        } else {\r\n            return res.status(404).send({ message: 'Error on retrieving station' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id\r\n        });\r\n        if (station) {\r\n            return res.json(station)\r\n        } else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//search station by name\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if (station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n\r\n            })\r\n        } else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//search station by address\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if (station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n\r\n            })\r\n        } else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//update status by station id\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ stationid: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: finishtime,\r\n        status: req.body.status,\r\n        stock: stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//update stock details\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: finishtime,\r\n        status: status,\r\n        stock: {\r\n            diesel: req.body.diesel,\r\n            petrol: req.body.petrol\r\n        },\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//update queue length\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: finishtime,\r\n        status: status,\r\n        stock: stock,\r\n        queue: {\r\n            Car: req.body.queue.car,\r\n            Van: req.body.queue.van,\r\n            Bus: req.body.queue.bus,\r\n            Bike: req.body.queue.bike,\r\n            Tuk: req.body.queue.tuk\r\n        },\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//update arrival time \r\nconst updateArrivalTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: req.body.arrivaltime,\r\n        finishtime: finishtime,\r\n        status: status,\r\n        stock: stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//update finish time\r\nconst updateFinishTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: req.body.finishtime,\r\n        status: status,\r\n        stock: stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//update station details\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: finishtime,\r\n        status: req.body.status,\r\n        stock: req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\n//get vehicle count\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n\r\n            return res.status(200).send({ count: allCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//get Car count\r\nconst getCarCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n            return res.status(200).send({ count: carCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//get Van count\r\nconst getVanCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n            return res.status(200).send({ count: vanCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//get bus count\r\nconst getBusCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n            return res.status(200).send({ count: busCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//get bike count\r\nconst getBikeCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n            return res.status(200).send({ count: bikeCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n//get tuke count\r\nconst getTukCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n            return res.status(200).send({ count: tukCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount,\r\n    login,\r\n    updateArrivalTime,\r\n    updateFinishTime\r\n\r\n}"]}