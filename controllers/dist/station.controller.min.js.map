{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","bcrypt","auth","StationRegister","req","res","id","name","ownername","phonenumber","address","pwd","salt","password","fuelStation","regeneratorRuntime","async","_context","prev","next","body","arrivaltime","finishtime","status","stock","queue","genSaltSync","hashSync","diesel","Car","Van","Bus","Bike","Tuk","awrap","save","sent","abrupt","send","message","t0","stop","compareSync","token","generateAccessToken","_objectSpread","toJSON","fuelStations","_context3","find","json","getOneFuelStation","station","_context4","params","findOne","stationid","login","value","trim","$regex","$options","then","stations","searchByAddress","_context6","changeStatus","_context7","getAllFuelStation","findOneAndUpdate","updatestock","_context8","console","log","updatelength","_context9","searchStation","car","van","bus","bike","tuk","updateArrivalTime","_context10","_context11","updateStatus","_context12","response","updateStation","_context13","petrol","fuealStationData","carCount","bikeCount","tukCount","vanCount","busCount","count","getCarCount","_context15","getVanCount","_context16","getBikeCount","_context18","getTukCount","_context19"],"mappings":"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","file":"station.controller.min.js","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime : \"-\",\r\n        finishtime : \"-\",\r\n        status : \"Available\",\r\n        stock : {diesel :0 , petrol: 0},\r\n        queue : {Car :0 , Van: 0 , Bus: 0 , Bike: 0 , Tuk: 0},\r\n        password\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if (response) {\r\n            return res.status(201).send({ message: \"New Station Registered to the Fuel System\" })\r\n        } else {\r\n            return res.status(500).send({ message: \"Internal server error\" });\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({ message: \"Error while registering the station to the application\" })\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst login = async (req, res) => {\r\n    const id = req.body.id;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const fuelStation = await FuelStation.findOne({ id: id });\r\n        if (fuelStation) {\r\n            if (fuelStation && bcrypt.compareSync(password, fuelStation.password)) {\r\n                const token = auth.generateAccessToken(id);\r\n\r\n                return res.status(200).send({ ...fuelStation.toJSON(), token });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n\r\nconst getAllFuelStation = async (req, res) => {\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if (fuelStations) {\r\n            return res.json(fuelStations)\r\n        } else {\r\n            return res.status(404).send({ message: 'Error on retrieving station' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id\r\n        });\r\n        if (station) {\r\n            return res.json(station)\r\n        } else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if (station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n\r\n            })\r\n        } else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if (station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n\r\n            })\r\n        } else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ stationid: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: finishtime,\r\n        status: req.body.status,\r\n        stock: stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    console.log(req.body)\r\n    \r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        //stock : req.body.stock,\r\n        stock : {\r\n            diesel: req.body.stock.diesel,\r\n            petrol: req.body.stock.petrol\r\n        },\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    // console.table([ id, req.body.stock.diesel, req.body.stock.petrol])\r\n  \r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: finishtime,\r\n        status: status,\r\n        stock: stock,\r\n        queue: {\r\n            Car: req.body.queue.car,\r\n            Van: req.body.queue.van,\r\n            Bus: req.body.queue.bus,\r\n            Bike: req.body.queue.bike,\r\n            Tuk: req.body.queue.tuk\r\n        },\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateArrivalTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: req.body.arrivaltime,\r\n        finishtime: finishtime,\r\n        status: status,\r\n        stock: stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateFinishTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: req.body.finishtime,\r\n        status: status,\r\n        stock: stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: finishtime,\r\n        status: req.body.status,\r\n        stock: req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({ id: id });\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n\r\n    const changeStatus = {\r\n        id: id,\r\n        name: name,\r\n        ownername: ownername,\r\n        phonenumber: phonenumber,\r\n        address: address,\r\n        arrivaltime: arrivaltime,\r\n        finishtime: finishtime,\r\n        status: req.body.status,\r\n        stock: req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id }, changeStatus);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated' })\r\n        } else {\r\n\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n\r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n            return res.status(200).send({ count: allCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n            return res.status(200).send({ count: carCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n            return res.status(200).send({ count: vanCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n            return res.status(200).send({ count: busCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n            return res.status(200).send({ count: bikeCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getTukCount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({ id: value });\r\n\r\n        if (fuealStationData) {\r\n\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n            return res.status(200).send({ count: tukCount });\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount,\r\n    login,\r\n    updateArrivalTime,\r\n    updateFinishTime\r\n\r\n}"]}