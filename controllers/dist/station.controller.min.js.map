{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","bcrypt","auth","StationRegister","req","res","id","name","ownername","phonenumber","address","pwd","salt","password","fuelStation","regeneratorRuntime","async","_context","prev","next","body","arrivaltime","finishtime","status","stock","queue","genSaltSync","hashSync","diesel","Car","Van","Bus","Bike","Tuk","awrap","save","sent","abrupt","send","message","t0","Available","stop","compareSync","token","generateAccessToken","_objectSpread","toJSON","fuelStations","_context3","find","json","getOneFuelStation","station","_context4","params","findOne","stationid","login","value","trim","$regex","$options","then","stations","searchByAddress","_context6","changeStatus","_context7","getAllFuelStation","findOneAndUpdate","updatestock","_context8","updatelength","_context9","searchStation","updateFinishTime","_context11","updateStatus","_context12","response","getcount","fuealStationData","carCount","vanCount","busCount","bikeCount","tukCount","allCount","_context13","count","getCarCount","_context14","getBusCount","_context16","getBikeCount","_context17","module","exports","updateDetails","getVanCount","getTukCount","updateArrivalTime"],"mappings":"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","file":"station.controller.min.js","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime : \"-\",\r\n        finishtime : \"-\",\r\n        status : Available,\r\n        stock : {diesel :0 , petrol: 0},\r\n        queue : {Car :0 , Van: 0 , Bus: 0 , Bike: 0 , Tuk: 0},\r\n        password\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst login = async (req, res) => {\r\n    const id = req.body.id;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const fuelStation = await FuelStation.findOne({ id: id });\r\n        if (fuelStation) {\r\n            if (fuelStation && bcrypt.compareSync(password, fuelStation.password)) {\r\n                const token = auth.generateAccessToken(id);\r\n                \r\n                return res.status(200).send({ ...fuelStation.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n\r\nconst getAllFuelStation = async (req,res) =>{\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if(fuelStations) {\r\n            return res.json(fuelStations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: req.body.queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateArrivalTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : req.body.arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateFinishTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : req.body.finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n         \r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n           return res.status(200).send({count : allCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n           return res.status(200).send({count : carCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n           return res.status(200).send({count : vanCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n           return res.status(200).send({count : busCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n           return res.status(200).send({count : bikeCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getTukCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n           return res.status(200).send({count : tukCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount,\r\n    login,\r\n    updateArrivalTime,\r\n    updateFinishTime\r\n    \r\n}"]}