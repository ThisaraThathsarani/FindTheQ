{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","bcrypt","auth","StationRegister","req","res","id","name","ownername","phonenumber","address","pwd","salt","password","fuelStation","regeneratorRuntime","async","_context","prev","next","body","arrivaltime","finishtime","status","stock","queue","genSaltSync","hashSync","diesel","Car","Van","Bus","Bike","Tuk","awrap","save","sent","abrupt","send","message","t0","Available","stop","compareSync","token","generateAccessToken","_objectSpread","toJSON","fuelStations","_context3","find","json","getOneFuelStation","station","_context4","params","findOne","stationid","login","value","trim","$regex","$options","then","stations","searchByAddress","_context6","changeStatus","_context7","getAllFuelStation","findOneAndUpdate","updatestock","_context8","updatelength","_context9","searchStation","van","bus","bike","tuk","updateArrivalTime","_context10","updateFinishTime","_context11","updateStation","_context13","carCount","fuealStationData","vanCount","busCount","bikeCount","allCount","tukCount","count","getCarCount","_context15","getVanCount","_context16","getBikeCount","_context18","getTukCount","_context19","updateStatus"],"mappings":"wuBAAA,IAAMA,YAAcC,QAAQ,oCACRA,QAAQ,WAApBC,iBAAAA,QACFC,OAASF,QAAQ,YACjBG,KAAOH,QAAQ,wBAEfI,gBAAkB,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACdb,EAAKF,EAAIgB,KAAKd,GACdC,EAAOH,EAAIgB,KAAKb,KAPpBT,EAAcC,EAAQqB,KAAAZ,UASlBC,EAAcL,EAAIgB,KAAKX,YACvBC,EATUX,EAAQqB,KAAAV,QAApBV,EAAAA,KAUyBqB,YACVjB,EAAIgB,KAAKE,WAVjBvB,EAAQqB,KAAAG,OAYLnB,EAAIgB,KAAKI,MAXPpB,EAACgB,KAAAK,MAaXd,EAAMP,EAAIgB,KAAKP,SAXDD,EAAAX,OAAAyB,YAAA,IAAAb,EAAAZ,OAAA0B,SAAAhB,EAAAC,GAAAE,EAAA,IAAAhB,YAAA,CAAAQ,GAAAA,EACdA,KAAAA,EACAC,UAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAC,YAAUN,IACViB,WANc,IAOdC,OAAAA,UACAC,MARc,CAAAK,OAQDR,EAAKG,OARJ,GASdC,MATc,CAAAK,IASFT,EAAJU,IAASN,EATHO,IAAA,EAAAC,KAAA,EAAAC,IAAA,GAUdR,SAAAA,IAVcR,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAAAJ,mBAAAmB,MAgBIpC,EAAYqC,QAhBhB,KAAA,GAAA,GAAAlB,EAAAmB,KAAA,OAAAnB,EAAAoB,OAAA,SAkBhB9B,EAFgCgB,OAAA,KAAAe,KAAA,CAAAC,QAAA,+CAhBhBtB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAoB,OAAA,SAoBhB5B,EAAWc,OAAXd,KAAAA,KAJgC,CAAA8B,QAAA,2BAhBhB,KAAA,GAAAtB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAC,KAAA,GAAAD,EAAAuB,GAAAvB,EAAA,MAAA,IAuBhBK,QAAAA,IAAAA,EAAAA,IAvBgBL,EAAAoB,OAAA,SAwBhBd,EAAMA,OAAGkB,KARuBH,KAAA,CAAAC,QAAA,4DAhBhB,KAAA,GAAA,IAAA,MAAA,OAAAtB,EAAAyB,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OA0BEZ,MAAAA,SAAV1B,EAAAC,GAAUyB,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAASC,EAAAA,EAAKX,KAAxBd,GAA4B0B,EAA5B5B,EAAAgB,KAAAP,SAAUiB,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAClBjB,YAAAA,QAAAA,CAAAA,GAAAA,KADkBiB,KAAAA,EAAAA,KAClBjB,EADkBiB,EAAAA,MAAAA,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,GA1BFhB,GAAAb,OAAA0C,YAAA9B,EAAAC,EAAAD,UA0BEiB,OA1BFc,EAAA1C,KAAA2C,oBAAAvC,GA0BEwB,EAAAA,OAAAA,SA8BHzB,EAAIkB,OAAO,KAAKe,KAAhBQ,cAAA,GAA0BhC,EAAYiC,SAAtC,CAAgDH,MAAAA,MA9B7Cd,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SAiCHzB,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,qDAjC7BT,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SA1BFzB,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,8BA0BET,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,OAAAA,SA1BFzB,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAiCDhB,qDAPGO,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OASeS,kBAAS,SAAAnC,EAAAC,GAAA,IAAA2C,EAAA,OAAAjC,mBAAAC,MAAA,SAAAiC,GAAA,OAAA,OAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,KAAA,EAAA,OAAA8B,EAAA/B,KAAA,EAAA+B,EAAA9B,KAAA,EAAAJ,mBAAAmB,MAsCjBpC,YAAYoD,QAtCK,KAAA,EAAA,GAsCtCF,EAtCsCC,EAAAb,KAAA,OAAAa,EAAAZ,OAAA,SAnC1BhC,EAAA8C,KAAAH,IAmC0BC,EAAA9B,KAAA,EAAA,MAAA,KAAA,EAAA,OAAA8B,EAAAZ,OAAA,SA0C/BhC,EAAIkB,OAAO,KAAKe,KAAK,CAACC,QAAS,iCA1CA,KAAA,EAAAU,EAAA9B,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA8B,EAAA/B,KAAA,GAAA+B,EAAAT,GAAAS,EAAA,MAAA,GAAAA,EAAAZ,OAAA,SAnC1BhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAmC0B,KAAA,GAAA,IAAA,MAAA,OAAAU,EAAAP,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAIdU,kBAvCZ,SAAAhD,EAAAC,GAAA,IAAAC,EAAA+C,EAAA,OAAAtC,mBAAAC,MAAA,SAAAsC,GAAA,OAAA,OAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,KAAA,EAAA,OAqFdb,EAAKF,EAAImD,OAAOjD,GArFFgD,EAAApC,KAAA,EAAAoC,EAAAnC,KAAA,EAAAJ,mBAAAmB,MAAApC,YAAA0D,QAAA,CAAAC,UAAAnD,KAAA,KAAA,EAAA,GAAA+C,EAAAC,EAAAlB,KAAA,OAAAkB,EAAAjB,OAAA,SAAxBhC,EAAA8C,KAAAE,IAAwBC,EAAAnC,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAmC,EAAAjB,OAAA,SA8CVhC,EAARqD,OAAQ,KAAApB,KAAA,CAAAC,QAAA,2BA9CU,KAAA,GAAAe,EAAAnC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAmC,EAAApC,KAAA,GAAAoC,EAAAd,GAAAc,EAAA,MAAA,GAAAA,EAAAjB,OAAA,SA8CVhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BA9CU,KAAA,GAAA,IAAA,MAAA,OAAAe,EAAAZ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAgDd7B,cAAWT,SAAAA,EAASS,GAATT,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAFPuD,EAAAvD,EAAAmD,OAAAhD,KAAAqD,OAEOxD,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAGuCE,YAAAA,QAHvCF,KAAAA,EAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MA2DTN,YAAYoD,KAAK,CAAE3C,KAAM,CAAEsD,OAAQ,IAAMF,EAAQ,KAAMG,SAAU,OAASC,KAAK,SAACC,GA7D9E3D,EAAA8C,KAAAa,KAEO5D,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,OAAAA,SAFPC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAEOnC,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,OAAAA,SAmENC,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,2BAnE1BnC,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAFP6D,gBAAA,SAAA7D,EAAAC,GAAA,IAAAsD,EAAA,OAAA5C,mBAAAC,MAAA,SAAAkD,GAAA,OAAA,OAAAA,EAAAhD,KAAAgD,EAAA/C,MAAA,KAAA,EAAA,OA0ENwC,EAAQvD,EAAImD,OAAO7C,QAAQkD,OA1ErBM,EAAAhD,KAAA,EAAAgD,EAAA/C,KAAA,EAAAJ,mBAAAmB,MAUyDU,YAAAA,QAVzD,KAAA,EAAA,IAAAsB,EAAA9B,KAAA,CAAA8B,EAAA/C,KAAA,EAAA,MA+EFrB,YAAYoD,KAAK,CAAExC,QAAS,CAAEmD,OAAQ,IAAMF,EAAQ,KAAMG,SAAU,OAASC,KAAK,SAACC,GA/EjF3D,EAAA8C,KAAAa,KAAAE,EAAA/C,KAAA,GAAA,MAAA,KAAA,EAAA,OAAA+C,EAAA7B,OAAA,SAoFKhC,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,2BApFrC,KAAA,GAAA2B,EAAA/C,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA+C,EAAAhD,KAAA,GAAAgD,EAAA1B,GAAA0B,EAAA,MAAA,GAAAA,EAAA7B,OAAA,SAAAhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAAA,KAAA,GAAA,IAAA,MAAA,OAAA2B,EAAAxB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAgB4BH,aAAS,SAAAnC,EAAAC,GAAA,IAAAC,EAAAQ,EAAAD,EAAAN,EAAAC,EAAAC,EAAAC,EAAAW,EAAAC,EAAAE,EAAAC,EAAA0C,EAAA,OAAApD,mBAAAC,MAAA,SAAAoD,GAAA,OAAA,OAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,KAAA,EAAA,OAAXb,EAhB1BF,EAAAmD,OAAAjD,GAgBqC8D,EAAAjD,KAAA,EAAAJ,mBAAAmB,MAhBrCpC,YAAA0D,QAAA,CAAAC,UAAAnD,KAgBqC,KAAA,EAAA,OAhBrCQ,EAgBqCsD,EAAAhC,KAhBrCvB,EAAAC,EAAAD,SAAAN,EAAAO,EAAAP,KAAAC,EAAAM,EAAAN,UAAAC,EAAAK,EAAAL,YAAAC,EAAAI,EAAAJ,QAmBwB6B,EAASzB,EAAAO,YAAXC,EAnBtBR,EAAAQ,WAwGJE,EAAQV,EAAYU,MAxGhBC,EAAAX,EAAAW,MAAA0C,EAAA,CAAA7D,GAAAA,EAAAC,KAAAA,EAAAC,UAAAA,EAAdC,YAAAA,EAgHQC,QAAUA,EAvFZ2D,YAAiBhD,EAAGC,WAAAA,EAAAC,OAAAnB,EAAAgB,KAAAG,OAAAC,MAAAA,EAAAC,MAAAA,EAAAZ,SAAAA,GATyBuD,EAAAlD,KAAA,GAAAkD,EAAAjD,KAAA,GAAAJ,mBAAAmB,MASzBpC,YAAAwE,iBAAA,CAAAb,UAAAnD,GAAA6D,IATyB,KAAA,GAAA,GAAAC,EAAAhC,KAAA,OAAAgC,EAAA/B,OAAA,SA6GhChC,EAAIkB,OAAO,KAAKe,KAAK,CAACC,QAAS,0BA7GC6B,EAAAjD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAiD,EAAA/B,OAAA,SASzBhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BATyB,KAAA,GAAA6B,EAAAjD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAiD,EAAAlD,KAAA,GAAAkD,EAAA5B,GAAA4B,EAAA,MAAA,IAAAA,EAAA/B,OAAA,SAoHpChC,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,sBApHI,KAAA,GAAA,IAAA,MAAA,OAAA6B,EAAA1B,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAyH7C6B,YAAc,SAAOnE,EAAKC,GAAZ,IAAAC,EAAAQ,EAAAD,EAAAN,EAAAC,EAAAC,EAAAC,EAAAW,EAAAC,EAAAC,EAAAE,EAAA0C,EAAA,OAAApD,mBAAAC,MAAA,SAAAwD,GAAA,OAAA,OAAAA,EAAAtD,KAAAsD,EAAArD,MAAA,KAAA,EAAA,OAhHMb,EAAAF,EAAAmD,OAAAjD,GAgHNkE,EAAArD,KAAA,EAAAJ,mBAAAmB,MAhHMpC,YAAA0D,QAAA,CAAAlD,GAAAA,KAgHN,KAAA,EAAA,OAhHMQ,EAgHN0D,EAAApC,KAhHMvB,EAAAC,EAAAD,SAAAN,EAAAO,EAAAP,KAAAC,EAAAM,EAAAN,UASY+B,EAASzB,EAAAL,YAAXC,EATVI,EAAAJ,QA2HhBW,EAAcP,EAAYO,YA3HVC,EAAAR,EAAAQ,WAAAC,EAAAT,EAAAS,OAAAE,EAAAX,EAAAW,MAAA0C,EAAA,CAAA7D,GAAAA,EAA1BC,KAAAA,EAmIQC,UAAYA,EAtHd4C,YAAiB3C,EAAGC,QAAAA,EAAAW,YAAAA,EAAAC,WAAAA,EAAAC,OAAAA,EAAAC,MAAApB,EAAAgB,KAAAI,MAChBlB,MAAKF,EADWS,SAAAA,GAmGN2D,EAAAtD,KAAA,GAAAsD,EAAArD,KAAA,GAAAJ,mBAAAmB,MAgCWpC,YAAYwE,iBAAiB,CAAEb,UAAWnD,GAAO6D,IAhC5D,KAAA,GAAA,GAAAK,EAAApC,KAAA,OAAAoC,EAAAnC,OAAA,SAnGMhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,0BAmGNiC,EAAArD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAqD,EAAAnC,OAAA,SAnGMhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAmGN,KAAA,GAAAiC,EAAArD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAqD,EAAAtD,KAAA,GAAAsD,EAAAhC,GAAAgC,EAAA,MAAA,IAAAA,EAAAnC,OAAA,SAnGMhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAQJ,sBA2FF,KAAA,GAAA,IAAA,MAAA,OAAAiC,EAAA9B,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAzFoB+B,aAVd,SAAArE,EAAAC,GAAA,IAAAC,EAAAQ,EAAAD,EAAAN,EAAAC,EAAAC,EAAAC,EAAAW,EAAAC,EAAAC,EAAAC,EAAA2C,EAAA,OAAApD,mBAAAC,MAAA,SAAA0D,GAAA,OAAA,OAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,KAAA,EAAA,OAkJhBb,EAAKF,EAAImD,OAAOjD,GAlJAoE,EAAAvD,KAAA,EAAAJ,mBAAAmB,MAAApC,YAAA0D,QAAA,CAAAlD,GAAAA,KAAA,KAAA,EAAA,OAAAQ,EAAA4D,EAAAtC,KAsJhBvB,EAAWC,EAAYD,SAtJPN,EAAAO,EAAAP,KAAAC,EAAAM,EAAAN,UAAAC,EAAAK,EAAAL,YAaY8B,EAAOzB,EAAEJ,QAAXW,EAbVP,EAAAO,YA6JhBC,EAAaR,EAAYQ,WA7JTC,EAAAT,EAAAS,OAAAC,EAAAV,EAAAU,MAAA2C,EAAA,CAAA7D,GAAAA,EAAAC,KAAAA,EAA1BC,UAAAA,EAqKQC,YAAcA,EApJhBkE,QAAajE,EAAGW,YAAAA,EAAAC,WAAAA,EAAAC,OAAAA,EAAAC,MAAAA,EAAAC,MAAA,CACdkC,IADcvD,EACHgB,KAACmC,MAAOhD,IADLuB,IAAA1B,EAAAgB,KAAAK,MAAAmD,IAAA7C,IAAA3B,EAAAgB,KAAAK,MAAAoD,IAAA7C,KAAA5B,EAAAgB,KAAAK,MAAAqD,KA+JV7C,IAAK7B,EAAIgB,KAAKK,MAAMsD,KA3JpB1B,SAJUxC,GAjBI6D,EAAAxD,KAAA,GAAAwD,EAAAvD,KAAA,GAAAJ,mBAAAmB,MAiBJpC,YAAAwE,iBAAA,CAAAhE,GAAAA,GAAA6D,IAjBI,KAAA,GAAA,GAAAO,EAAAtC,KAAA,OAAAsC,EAAArC,OAAA,SAuBdvC,EAAYoD,OAAK,KAAAZ,KAAA,CAAAC,QAAA,0BAvBHmC,EAAAvD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAuD,EAAArC,OAAA,SAuByCyB,EAAAA,OAAU,KAAAxB,KAAA,CAAAC,QAAA,2BAvBnD,KAAA,GAAAmC,EAAAvD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAuD,EAAAxD,KAAA,GAAAwD,EAAAlC,GAAAkC,EAAA,MAAA,IAAAA,EAAArC,OAAA,SAuBdhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,sBAvBc,KAAA,GAAA,IAAA,MAAA,OAAAmC,EAAAhC,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAiBJsC,kBAAA,SAAA5E,EAAAC,GAAA,IAAAC,EAAAQ,EAAAD,EAAAN,EAAAC,EAAAC,EAAAC,EAAAY,EAAAC,EAAAC,EAAAC,EAAA0C,EAAA,OAAApD,mBAAAC,MAAA,SAAAiE,GAAA,OAAA,OAAAA,EAAA/D,KAAA+D,EAAA9D,MAAA,KAAA,EAAA,OAWoBoB,EAAAA,EAAOgB,OAAEjD,GAX7B2E,EAAA9D,KAAA,EAAAJ,mBAAAmB,MAuLQpC,YAAY0D,QAAQ,CAAClD,GAAKA,KAvLlC,KAAA,EAAA,OAuLZQ,EAvLYmE,EAAA7C,KAAAvB,EAAAC,EAAAD,SA2LZN,EAAOO,EAAYP,KA3LPC,EAAAM,EAAAN,UAAAC,EAAAK,EAAAL,YAAAC,EAAAI,EAAAJ,QAAAY,EAAAR,EAAAQ,WAcgBiB,EAAOzB,EAAES,OAAXC,EAddV,EAAAU,MAkMZC,EAAQX,EAAYW,MAlMR0C,EAAA,CAAA7D,GAAAA,EAAAC,KAAAA,EAAAC,UAAAA,EAAAC,YAAAA,EAAtBC,QAAAA,EA0MQW,YAAcjB,EAAIgB,KAAKC,YAxLzB4C,WAAe3C,EAAGC,OAAAA,EAAAC,MAAAA,EAAAC,MAAAA,EAAAZ,SAAAA,GAlBFoE,EAAA/D,KAAA,GAAA+D,EAAA9D,KAAA,GAAAJ,mBAAAmB,MAkBEpC,YAIIA,iBAJJ,CAAAQ,GAAAA,GAAA6D,IAlBF,KAAA,GAAA,GAAAc,EAAA7C,KAAA,OAAA6C,EAAA5C,OAAA,SAkBEhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,0BAlBF0C,EAAA9D,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA8D,EAAA5C,OAAA,SAuBXgB,EAAAA,OALa,KAAAf,KAAA,CAAAC,QAAA,2BAlBF,KAAA,GAAA0C,EAAA9D,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA8D,EAAA/D,KAAA,GAAA+D,EAAAzC,GAAAyC,EAAA,MAAA,IAAAA,EAAA5C,OAAA,SA6NPhC,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,sBA7NzB,KAAA,GAAA,IAAA,MAAA,OAAA0C,EAAAvC,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAwBkBwC,iBAAA,SAAA9E,EAAAC,GAAA,IAAAC,EAAAQ,EAAAD,EAAAN,EAAAC,EAAAC,EAAAC,EAAAW,EAAAE,EAAAC,EAAAC,EAAA0C,EAAA,OAAApD,mBAAAC,MAAA,SAAAmE,GAAA,OAAA,OAAAA,EAAAjE,KAAAiE,EAAAhE,MAAA,KAAA,EAAA,OAAXb,EAA4DyD,EAAKR,OAAAjD,GAAtD6E,EAAAhE,KAAA,EAAAJ,mBAAAmB,MAA5BpC,YAAA0D,QAAA,CAAAlD,GAAAA,KAA4B,KAAA,EAAA,OAG3BQ,EAH2BqE,EAAA/C,KANhBvB,EAAAC,EAAAD,SAAAN,EAAAO,EAAAP,KAAAC,EAAAM,EAAAN,UAWkB+B,EAASzB,EAAAL,YAAXC,EAXhBI,EAAAJ,QA2NdW,EAAcP,EAAYO,YA3NZE,EAAAT,EAAAS,OAAAC,EAAAV,EAAAU,MAAAC,EAAAX,EAAAW,MAAA0C,EAAA,CAAA7D,GAAAA,EAAAC,KAAAA,EAAAC,UAAAA,EAcc+B,YAAS9B,EAAXC,QAdZA,EAsOhBW,YAAcA,EAtOEC,WAAAlB,EAAAgB,KAAAE,WAAAC,OAAAA,EAAAC,MAAAA,EAAAC,MAAAA,EAAAZ,SAAAA,GAMgBsE,EAAAjE,KAAA,GAAAiE,EAAAhE,KAAA,GAAAJ,mBAAAmB,MAYnBpC,YAAAwE,iBAAA,CAAAhE,GAAAA,GAAA6D,IAZmB,KAAA,GAAA,GAAAgB,EAAA/C,KAAA,OAAA+C,EAAA9C,OAAA,SAYnBhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,0BAZmB4C,EAAAhE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgE,EAAA9C,OAAA,SAazBjC,EAAImD,OAAOjD,KADLgC,KAAA,CAAAC,QAAA,2BAZmB,KAAA,GAAA4C,EAAAhE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgE,EAAAjE,KAAA,GAAAiE,EAAA3C,GAAA2C,EAAA,MAAA,IAAAA,EAAA9C,OAAA,SAYnBhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,sBAZmB,KAAA,GAAA,IAAA,MAAA,OAAA4C,EAAAzC,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAmB9BnC,cAAOO,SAAYP,EAPRF,GAOJS,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OACPN,EAAAA,EARW+C,OAQCzC,GADLA,EAAAA,KAAAA,EAAAA,mBAAAA,MAGGA,YAVC0C,QAAA,CAAAlD,GAAAA,KAOJQ,KAAAA,EAAAA,OAGPJ,EAHOI,EAAAA,KAKPQ,EAZWR,EAYEA,SAEbW,EAdWX,EAcQP,KAEnB4D,EAhBWrD,EAgBIN,UACjBF,EADiBQ,EAAAL,YAEjBF,EAAOA,EAFUG,QAGjBF,EAAYA,EAHKa,YAIjBZ,EAAWK,EAAGL,WACdC,EAAAA,EALiBe,MAOjBH,EAAaA,CACbC,GAAAA,EACAC,KAAAA,EACAC,UAAOA,EACPZ,YAAUA,EAXOH,QAhBJA,EAAAW,YAAAA,EAAAC,WAAAA,EAAAC,OAAAnB,EAAAgB,KAAAG,OAgCyCkC,MAAAA,EAAAA,KAAWnD,MAAbmB,MAAoB0C,EAsOxEtD,SAAUA,GA/PDC,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,mBAAAA,MAPIhB,YAAAwE,iBAAA,CAAAhE,GAAAA,GAAA6D,IAOJrD,KAAAA,GAAAA,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,OAAAA,SAPIT,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,0BAOJzB,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SA2BwByB,EAAOhB,OAAE,KAAAe,KAAA,CAAAC,QAAA,2BA3BjCzB,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,IAAAA,EAAAA,OAAAA,SAPIT,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAqCH,sBA9BDzB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,GAAAA,OAPIsE,cAAA,SAAAhF,EAAAC,GAAA,IAAAC,EAAAQ,EAAAD,EAAAN,EAAAC,EAAAC,EAAAC,EAAAW,EAAAC,EAAA6C,EAAA,OAAApD,mBAAAC,MAAA,SAAAqE,GAAA,OAAA,OAAAA,EAAAnE,KAAAmE,EAAAlE,MAAA,KAAA,EAAA,OAAAb,EAAAF,EAAAmD,OAAAjD,GAAA+E,EAAAlE,KAAA,EAAAJ,mBAAAmB,MAAApC,YAAA0D,QAAA,CAAAlD,GAAAA,KAAA,KAAA,EAAA,OAAAQ,EAAAuE,EAAAjD,KAAAvB,EAAAC,EAAAD,SAyCiB0B,EAAAA,EAAShC,KAAXC,EAzCfM,EAAAN,UAkSXC,EAAcK,EAAYL,YAlSfC,EAAAI,EAAAJ,QAAAW,EAAAP,EAAAO,YAAAC,EAAAR,EAAAQ,WAAA6C,EAAA,CAAA7D,GAAAA,EAArBC,KAAAA,EA0SQC,UAAYA,EA5Pd+D,YAAc9D,EAAAC,QAAAA,EAAAW,YAAAA,EAAAC,WAAAA,EAAAC,OAAAnB,EAAAgB,KAAAG,OAAAC,MAAApB,EAAAgB,KAAAI,MACVlB,MAAKF,MADKS,SAAAA,GA9CCwE,EAAAnE,KAAA,GAAAmE,EAAAlE,KAAA,GAAAJ,mBAAAmB,MA8CDpC,YAAAwE,iBAAA,CAAAhE,GAAAA,GAAA6D,IA9CC,KAAA,GAAA,GAAAkB,EAAAjD,KAAA,OAAAiD,EAAAhD,OAAA,SA8CDhC,EAKCS,OAAAA,KAAYD,KAAAA,CALb0B,QAAA,0BA9CC8C,EAAAlE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAkE,EAAAhD,OAAA,SAuDX5B,EAAAA,OAAcK,KAAAA,KAAYL,CAAAA,QAThB,2BA9CC,KAAA,GAAA4E,EAAAlE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAkE,EAAAnE,KAAA,GAAAmE,EAAA7C,GAAA6C,EAAA,MAAA,IAAAA,EAAAhD,OAAA,SA2DXd,EAAST,OAAAA,KAAYS,KAAAA,CAbXgB,QAAA,sBA9CC,KAAA,GAAA,IAAA,MAAA,OAAA8C,EAAA3C,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAiEblC,SAAAA,SAAYA,EAAAA,GAAZA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAAcA,GAAAA,OACdC,QAAAA,IAAAA,YAFAF,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAHiBV,YAAA0D,QAAA,CAAAlD,GAAAqD,KAGjBnD,KAAAA,EAAAA,GAKAe,EALAf,EAAAA,KAAAA,OAnBY8E,EAAAC,EAAA9D,MAAAI,IAAA2D,EAAAD,EAAA9D,MAAAK,IAAA2D,EAAAF,EAAA9D,MAAAM,IAAA2D,EAAAH,EAgCWzF,MAAAA,KAA+B2D,EAAWnD,EAAAA,MAAAA,IAhCrDqF,EAAAL,EAAAE,EAAAC,EAAAC,EAAAE,EAmBZpF,EAAAA,OAAAA,SAnBYH,EAAAkB,OAAA,KAAAe,KAAA,CAAAuD,MAAAF,KAmBZnF,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SAnBYH,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAqCDhB,gCAlBXf,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,OAAAA,SAoSOH,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,2BApSvC/B,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAwSFsF,YAAc,SAAO1F,EAAIC,GAAX,IAAAsD,EAAA4B,EAAAD,EAAA,OAAAvE,mBAAAC,MAAA,SAAA+E,GAAA,OAAA,OAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,KAAA,EAAA,OA3TAwC,EAAAvD,EAAAmD,OAAAjD,GAAAsD,OA2TAmC,EAAA7E,KAAA,EAAA6E,EAAA5E,KAAA,EAAAJ,mBAAAmB,MAlR2BpC,YAAA0D,QAAA,CAAAlD,GAAAqD,KAkR3B,KAAA,EAAA,GAlRkBpB,EAkRlBwD,EAAA3D,KAAA,OA3TAkD,EAAAC,EAAA9D,MAAAI,IA2TAkE,EAAA1D,OAAA,SA3TAhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAuD,MAAAP,KA2TAS,EAAA5E,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA4E,EAAA1D,OAAA,SA3TpBhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,gCA2ToB,KAAA,GAAAwD,EAAA5E,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA4E,EAAA7E,KAAA,GAAA6E,EAAAvD,GAAAuD,EAAA,MAAA,GAAAA,EAAA1D,OAAA,SA7QChC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BA6QD,KAAA,GAAA,IAAA,MAAA,OAAAwD,EAAArD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA7QCsD,YAAA,SAAA5F,EAAAC,GAAA,IAAAsD,EAAA4B,EAAAC,EAAA,OAAAzE,mBAAAC,MAAA,SAAAiF,GAAA,OAAA,OAAAA,EAAA/E,KAAA+E,EAAA9E,MAAA,KAAA,EAAA,OACXb,EAAKF,EAAImD,OAAOjD,GADLsD,OAAAqC,EAAA/E,KAAA,EAAA+E,EAAA9E,KAAA,EAAAJ,mBAAAmB,MAAApC,YAAA0D,QAAA,CAAAlD,GAAAqD,KAAA,KAAA,EAAA,GAAA4B,EAAAU,EAAA7D,KAAA,OAKXvB,EAAWC,EALAW,MAAAK,IAAAmE,EAAA5D,OAAA,SAQX7B,EAAYM,OAAAA,KAAYN,KAAAA,CAAAA,MARbgF,KAAAS,EAAA9E,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA8E,EAAA5D,OAAA,SAWXhB,EAXWE,OAWGT,KAAWwB,KAACjB,CAAAA,QAXf,gCAAA,KAAA,GAAA4E,EAAA9E,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA8E,EAAA/E,KAAA,GAAA+E,EAAAzD,GAAAyD,EAAA,MAAA,GAAAA,EAAA5D,OAAA,SAAAhC,EAcHS,OAAAA,KAAYU,KAdT,CAAAe,QAAA,2BAAA,KAAA,GAAA,IAAA,MAAA,OAAA0D,EAAAvD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAmBblC,YAAAA,SAAYA,EAAAA,GAAZA,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAAcA,GAAAA,OADdD,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAHiBV,YAAA0D,QAAA,CAAAlD,GAAAqD,KAGjBnD,KAAAA,EAAAA,GAKAe,EALAf,EAAAA,KAAAA,OASIsB,EAAKyD,EAFF9D,MAAAM,IAPPvB,EAAAA,OAAAA,SAWQH,EAAED,OAASqB,KAATa,KAJH,CAAAuD,MAAAJ,KAPPjF,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SAcAK,EAAUA,OAAAA,KAAAA,KAAAA,CAAAA,QAAAA,gCAdVL,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,OAAAA,SAnBaH,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAmBb/B,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAyTF0F,aAAe,SAAO9F,EAAIC,GAAX,IAAAsD,EAAA4B,EAAAG,EAAA,OAAA3E,mBAAAC,MAAA,SAAAmF,GAAA,OAAA,OAAAA,EAAAjF,KAAAiF,EAAAhF,MAAA,KAAA,EAAA,OA5UAwC,EAAAvD,EAAAmD,OAAAjD,GAAAsD,OA4UAuC,EAAAjF,KAAA,EAAAiF,EAAAhF,KAAA,EAAAJ,mBAAAmB,MA5UApC,YAAA0D,QAAA,CAAAlD,GAAAqD,KA4UA,KAAA,EAAA,GA5UA4B,EA4UAY,EAAA/D,KAAA,OA5UAsD,EAAAH,EAwCFlF,MAAIkB,KAoSF4E,EAAA9D,OAAA,SA5UAhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAuD,MAAAH,KA4UAS,EAAAhF,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgF,EAAA9D,OAAA,SA5UAhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QA2CFhB,gCAiSE,KAAA,GAAA4E,EAAAhF,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgF,EAAAjF,KAAA,GAAAiF,EAAA3D,GAAA2D,EAAA,MAAA,GAAAA,EAAA9D,OAAA,SAiBNhC,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,2BAjB1B,KAAA,GAAA,IAAA,MAAA,OAAA4D,EAAAzD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAqBf0D,YAAc,SAAOhG,EAAIC,GAAX,IAAAsD,EAAA4B,EAAAK,EAAA,OAAA7E,mBAAAC,MAAA,SAAAqF,GAAA,OAAA,OAAAA,EAAAnF,KAAAmF,EAAAlF,MAAA,KAAA,EAAA,OAjWCwC,EAAAvD,EAAAmD,OAAAjD,GAAAsD,OAiWDyC,EAAAnF,KAAA,EAAAmF,EAAAlF,KAAA,EAAAJ,mBAAAmB,MAlT2BpC,YAAA0D,QAAA,CAAAlD,GAAAqD,KAkT3B,KAAA,EAAA,GAlTkBpB,EAkTlB8D,EAAAjE,KAAA,OAjWCwD,EAAAL,EAAA9D,MAAAQ,IAiWDoE,EAAAhE,OAAA,SAjWChC,EAAAkB,OAAA,KAAAe,KAAA,CAAAuD,MAAAD,KAiWDS,EAAAlF,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAkF,EAAAhE,OAAA,SAjWpBhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,gCAiWoB,KAAA,GAAA8D,EAAAlF,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAkF,EAAAnF,KAAA,GAAAmF,EAAA7D,GAAA6D,EAAA,MAAA,GAAAA,EAAAhE,OAAA,SA7SMhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BA6SN,KAAA,GAAA,IAAA,MAAA,OAAA8D,EAAA3D,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA5SVpC,OAAAA,QAAKF,CADWD,gBAAAA,gBAAAkE,kBAAAA,kBAGyB/D,kBAAAA,kBAADqE,cAAAA,cAqU9CV,gBAAAA,gBAxUsBqC,aAAAA,aAGhBxF,YAAAA,YAEAD,aAAAA,aAEAN,cAAAA,cACAC,SAAAA,SACAC,YAAAA,YACAC,YAAAA,YACAY,YAAAA,YACAC,aAAAA,aACAC,YAAAA,YACAC,MAAAA,MAEA0C,kBAAAA,kBACF7D,iBAAAA","file":"station.controller.min.js","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime : \"-\",\r\n        finishtime : \"-\",\r\n        status : Available,\r\n        stock : {diesel :0 , petrol: 0},\r\n        queue : {Car :0 , Van: 0 , Bus: 0 , Bike: 0 , Tuk: 0},\r\n        password\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst login = async (req, res) => {\r\n    const id = req.body.id;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const fuelStation = await FuelStation.findOne({ id: id });\r\n        if (fuelStation) {\r\n            if (fuelStation && bcrypt.compareSync(password, fuelStation.password)) {\r\n                const token = auth.generateAccessToken(id);\r\n                \r\n                return res.status(200).send({ ...fuelStation.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n\r\nconst getAllFuelStation = async (req,res) =>{\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if(fuelStations) {\r\n            return res.json(fuelStations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: {\r\n            Car: req.body.queue.car,\r\n            Van: req.body.queue.van,\r\n            Bus: req.body.queue.bus,\r\n            Bike: req.body.queue.bike,\r\n            Tuk: req.body.queue.tuk\r\n        },\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateArrivalTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : req.body.arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateFinishTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : req.body.finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n         \r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n           return res.status(200).send({count : allCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n           return res.status(200).send({count : carCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n           return res.status(200).send({count : vanCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n           return res.status(200).send({count : busCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n           return res.status(200).send({count : bikeCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getTukCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n           return res.status(200).send({count : tukCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount,\r\n    login,\r\n    updateArrivalTime,\r\n    updateFinishTime\r\n    \r\n}"]}