{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","StationRegister","req","res","stationid","stationname","ownername","phonenumber","address","arrivaltime","finishtime","status","stock","queue","fuelStation","regeneratorRuntime","async","_context","prev","next","body","awrap","save","sent","abrupt","send","message","t0","console","log","stop","getAllFuelStation","fuelStations","_context2","find","json","getOneFuelStation","station","_context3","params","findOne","searchStation","value","_context4","trim","$regex","$options","then","stations","searchByAddress","_context5","changeStatus","_context6","findOneAndUpdate","updatestock","_context7","updatelength","_context8","updateDetails","_context9","updateStatus","getcount","fuealStationData","carCount","vanCount","busCount","bikeCount","allCount","_context10","Car","Van","Bus","Bike","count","getCarCount","_context11","parseInt","getVanCount","_context12","getBusCount","_context13","response","module","exports","getBikeCount"],"mappings":"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","file":"station.controller.min.js","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const stationid = req.body.stationid;\r\n    const stationname = req.body.stationname;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n\r\n    const fuelStation = new FuelStation({\r\n        stationid,\r\n        stationname,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime,\r\n        finishtime,\r\n        status,\r\n        stock,\r\n        queue\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst getAllFuelStation = async (req,res) =>{\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if(fuelStations) {\r\n            return res.json(fuelStations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const stationid = req.params.stationid;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: stationid \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.stationname.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ stationname: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const stationid = req.params.stationid;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : stationid});\r\n\r\n    const stationname = fuelStation.stationname;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        stationid : stationid,\r\n        stationname : stationname,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: stationid } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const stationid = req.params.stationid;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : stationid});\r\n\r\n    const stationname = fuelStation.stationname;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        stationid : stationid,\r\n        stationname : stationname,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: stationid } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const stationid = req.params.stationid;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : stationid});\r\n\r\n    const stationname = fuelStation.stationname;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        stationid : stationid,\r\n        stationname : stationname,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: req.body.queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: stationid } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const stationid = req.params.stationid;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : stationid});\r\n\r\n    const stationname = fuelStation.stationname;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        stationid : stationid,\r\n        stationname : stationname,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: stationid } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.stationid.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({stationid : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = parseInt(fuealStationData.queue.Car);\r\n            let vanCount = parseInt(fuealStationData.queue.Van);\r\n            let busCount = parseInt(fuealStationData.queue.Bus);\r\n            let bikeCount = parseInt(fuealStationData.queue.Bike);\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount;\r\n         \r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n           return res.status(200).send({count : allCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req,res) => {\r\n    let value = req.params.stationid.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({stationid : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = parseInt(fuealStationData.queue.Car);\r\n\r\n           return res.status(200).send({count : carCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req,res) => {\r\n    let value = req.params.stationid.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({stationid : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let vanCount = parseInt(fuealStationData.queue.Van);\r\n\r\n           return res.status(200).send({count : vanCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req,res) => {\r\n    let value = req.params.stationid.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({stationid : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let busCount = parseInt(fuealStationData.queue.Bus);\r\n\r\n           return res.status(200).send({count : busCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req,res) => {\r\n    let value = req.params.stationid.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({stationid : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let bikeCount = parseInt(fuealStationData.queue.Bike);\r\n\r\n           return res.status(200).send({count : bikeCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount\r\n    \r\n}"]}