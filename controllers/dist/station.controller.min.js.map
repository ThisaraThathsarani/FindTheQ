{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","bcrypt","auth","StationRegister","req","res","id","name","ownername","phonenumber","address","pwd","salt","password","fuelStation","regeneratorRuntime","async","_context","prev","next","body","arrivaltime","finishtime","status","stock","queue","genSaltSync","hashSync","diesel","Car","Van","Bus","Bike","Tuk","awrap","save","sent","abrupt","send","message","t0","stop","compareSync","token","generateAccessToken","_objectSpread","toJSON","fuelStations","_context3","find","json","getOneFuelStation","station","_context4","params","findOne","stationid","login","value","trim","$regex","$options","then","stations","searchByAddress","_context6","changeStatus","_context7","getAllFuelStation","findOneAndUpdate","updatestock","_context8","updatelength","_context9","searchStation","updateFinishTime","_context11","updateStatus","_context12","response","getcount","fuealStationData","carCount","vanCount","busCount","bikeCount","tukCount","allCount","_context13","count","getCarCount","_context14","getBusCount","_context16","getBikeCount","_context17","module","exports","updateDetails","getVanCount","getTukCount","updateArrivalTime"],"mappings":"wuBAAA,IAAMA,YAAcC,QAAQ,oCACRA,QAAQ,WAApBC,iBAAAA,QACFC,OAASF,QAAQ,YACjBG,KAAOH,QAAQ,wBAEfI,gBAAkB,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACdb,EAAKF,EAAIgB,KAAKd,GACdC,EAAOH,EAAIgB,KAAKb,KAPpBT,EAAcC,EAAQqB,KAAAZ,UASlBC,EAAcL,EAAIgB,KAAKX,YACvBC,EATUX,EAAQqB,KAAAV,QAApBV,EAAAA,KAUyBqB,YACVjB,EAAIgB,KAAKE,WAVjBvB,EAAQqB,KAAAG,OAYLnB,EAAIgB,KAAKI,MAXPpB,EAACgB,KAAAK,MAaXd,EAAMP,EAAIgB,KAAKP,SAXDD,EAAAX,OAAAyB,YAAA,IAAAb,EAAAZ,OAAA0B,SAAAhB,EAAAC,GAAAE,EAAA,IAAAhB,YAAA,CAAAQ,GAAAA,EACdA,KAAAA,EACAC,UAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAC,YAAUN,EACViB,WANc,EAOdC,OAAAA,EACAC,MARc,CAAAK,OAQDR,EAAKG,OARJ,GASdC,MATc,CAAAK,IASFT,EAAJU,IAASN,EATHO,IAAA,EAAAC,KAAA,EAAAC,IAAA,GAUdR,SAAAA,IAVcR,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAAAJ,mBAAAmB,MAgBIpC,EAAYqC,QAhBhB,KAAA,GAAA,GAAAlB,EAAAmB,KAAA,OAAAnB,EAAAoB,OAAA,SAkBhB9B,EAFgCgB,OAAA,KAAAe,KAAA,CAAAC,QAAA,+CAhBhBtB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAoB,OAAA,SAoBhB5B,EAAWc,OAAXd,KAAAA,KAJgC,CAAA8B,QAAA,2BAhBhB,KAAA,GAAAtB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAC,KAAA,GAAAD,EAAAuB,GAAAvB,EAAA,MAAA,IAuBhBK,QAAAA,IAAAA,EAAAA,IAvBgBL,EAAAoB,OAAA,SAwBhBd,EAAMA,OAR0B,KAAAe,KAAA,CAAAC,QAAA,4DAhBhB,KAAA,GAAA,IAAA,MAAA,OAAAtB,EAAAwB,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OA0BEX,MAAAA,SAAV1B,EAAAC,GAAUyB,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAASC,EAAAA,EAAKX,KAAxBd,GAA4B0B,EAA5B5B,EAAAgB,KAAAP,SAAUiB,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAClBjB,YAAAA,QAAAA,CAAAA,GAAAA,KADkBiB,KAAAA,EAAAA,KAClBjB,EADkBiB,EAAAA,MAAAA,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,GA1BFhB,GAAAb,OAAAyC,YAAA7B,EAAAC,EAAAD,UA0BEiB,OA1BFa,EAAAzC,KAAA0C,oBAAAtC,GA0BEwB,EAAAA,OAAAA,SA8BHzB,EAAIkB,OAAO,KAAKe,KAAhBO,cAAA,GAA0B/B,EAAYgC,SAAtC,CAAgDH,MAAAA,MA9B7Cb,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SAiCHzB,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,qDAjC7BT,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SA1BFzB,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,8BA0BET,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,OAAAA,SA1BFzB,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAiCDhB,qDAPGO,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OASeS,kBAAS,SAAAnC,EAAAC,GAAA,IAAA0C,EAAA,OAAAhC,mBAAAC,MAAA,SAAAgC,GAAA,OAAA,OAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,KAAA,EAAA,OAAA6B,EAAA9B,KAAA,EAAA8B,EAAA7B,KAAA,EAAAJ,mBAAAmB,MAsCjBpC,YAAYmD,QAtCK,KAAA,EAAA,GAsCtCF,EAtCsCC,EAAAZ,KAAA,OAAAY,EAAAX,OAAA,SAnC1BhC,EAAA6C,KAAAH,IAmC0BC,EAAA7B,KAAA,EAAA,MAAA,KAAA,EAAA,OAAA6B,EAAAX,OAAA,SA0C/BhC,EAAIkB,OAAO,KAAKe,KAAK,CAACC,QAAS,iCA1CA,KAAA,EAAAS,EAAA7B,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA6B,EAAA9B,KAAA,GAAA8B,EAAAR,GAAAQ,EAAA,MAAA,GAAAA,EAAAX,OAAA,SAnC1BhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAmC0B,KAAA,GAAA,IAAA,MAAA,OAAAS,EAAAP,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAIdU,kBAvCZ,SAAA/C,EAAAC,GAAA,IAAAC,EAAA8C,EAAA,OAAArC,mBAAAC,MAAA,SAAAqC,GAAA,OAAA,OAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,KAAA,EAAA,OAqFdb,EAAKF,EAAIkD,OAAOhD,GArFF+C,EAAAnC,KAAA,EAAAmC,EAAAlC,KAAA,EAAAJ,mBAAAmB,MAAApC,YAAAyD,QAAA,CAAAC,UAAAlD,KAAA,KAAA,EAAA,GAAA8C,EAAAC,EAAAjB,KAAA,OAAAiB,EAAAhB,OAAA,SAAxBhC,EAAA6C,KAAAE,IAAwBC,EAAAlC,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAkC,EAAAhB,OAAA,SA8CVhC,EAARoD,OAAQ,KAAAnB,KAAA,CAAAC,QAAA,2BA9CU,KAAA,GAAAc,EAAAlC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAkC,EAAAnC,KAAA,GAAAmC,EAAAb,GAAAa,EAAA,MAAA,GAAAA,EAAAhB,OAAA,SA8CVhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BA9CU,KAAA,GAAA,IAAA,MAAA,OAAAc,EAAAZ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAgDd5B,cAAWT,SAAAA,EAASS,GAATT,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAFPsD,EAAAtD,EAAAkD,OAAA/C,KAAAoD,OAEOvD,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAGuCE,YAAAA,QAHvCF,KAAAA,EAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MA2DTN,YAAYmD,KAAK,CAAE1C,KAAM,CAAEqD,OAAQ,IAAMF,EAAQ,KAAMG,SAAU,OAASC,KAAK,SAACC,GA7D9E1D,EAAA6C,KAAAa,KAEO3D,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,OAAAA,SAFPC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAEOnC,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,OAAAA,SAmENC,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,2BAnE1BnC,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAFP4D,gBAAA,SAAA5D,EAAAC,GAAA,IAAAqD,EAAA,OAAA3C,mBAAAC,MAAA,SAAAiD,GAAA,OAAA,OAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,KAAA,EAAA,OA0ENuC,EAAQtD,EAAIkD,OAAO5C,QAAQiD,OA1ErBM,EAAA/C,KAAA,EAAA+C,EAAA9C,KAAA,EAAAJ,mBAAAmB,MAUyDS,YAAAA,QAVzD,KAAA,EAAA,IAAAsB,EAAA7B,KAAA,CAAA6B,EAAA9C,KAAA,EAAA,MA+EFrB,YAAYmD,KAAK,CAAEvC,QAAS,CAAEkD,OAAQ,IAAMF,EAAQ,KAAMG,SAAU,OAASC,KAAK,SAACC,GA/EjF1D,EAAA6C,KAAAa,KAAAE,EAAA9C,KAAA,GAAA,MAAA,KAAA,EAAA,OAAA8C,EAAA5B,OAAA,SAoFKhC,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,2BApFrC,KAAA,GAAA0B,EAAA9C,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA8C,EAAA/C,KAAA,GAAA+C,EAAAzB,GAAAyB,EAAA,MAAA,GAAAA,EAAA5B,OAAA,SAAAhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAAA,KAAA,GAAA,IAAA,MAAA,OAAA0B,EAAAxB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAgB4BF,aAAS,SAAAnC,EAAAC,GAAA,IAAAC,EAAAQ,EAAAD,EAAAN,EAAAC,EAAAC,EAAAC,EAAAW,EAAAC,EAAAE,EAAAC,EAAAyC,EAAA,OAAAnD,mBAAAC,MAAA,SAAAmD,GAAA,OAAA,OAAAA,EAAAjD,KAAAiD,EAAAhD,MAAA,KAAA,EAAA,OAAXb,EAhB1BF,EAAAkD,OAAAhD,GAgBqC6D,EAAAhD,KAAA,EAAAJ,mBAAAmB,MAhBrCpC,YAAAyD,QAAA,CAAAC,UAAAlD,KAgBqC,KAAA,EAAA,OAhBrCQ,EAgBqCqD,EAAA/B,KAhBrCvB,EAAAC,EAAAD,SAAAN,EAAAO,EAAAP,KAAAC,EAAAM,EAAAN,UAAAC,EAAAK,EAAAL,YAAAC,EAAAI,EAAAJ,QAmBwB6B,EAASzB,EAAAO,YAAXC,EAnBtBR,EAAAQ,WAwGJE,EAAQV,EAAYU,MAxGhBC,EAAAX,EAAAW,MAAAyC,EAAA,CAAA5D,GAAAA,EAAAC,KAAAA,EAAAC,UAAAA,EAAdC,YAAAA,EAgHQC,QAAUA,EAvFZ0D,YAAiB/C,EAAGC,WAAAA,EAAAC,OAAAnB,EAAAgB,KAAAG,OAAAC,MAAAA,EAAAC,MAAAA,EAAAZ,SAAAA,GATyBsD,EAAAjD,KAAA,GAAAiD,EAAAhD,KAAA,GAAAJ,mBAAAmB,MASzBpC,YAAAuE,iBAAA,CAAAb,UAAAlD,GAAA4D,IATyB,KAAA,GAAA,GAAAC,EAAA/B,KAAA,OAAA+B,EAAA9B,OAAA,SA6GhChC,EAAIkB,OAAO,KAAKe,KAAK,CAACC,QAAS,0BA7GC4B,EAAAhD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgD,EAAA9B,OAAA,SASzBhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BATyB,KAAA,GAAA4B,EAAAhD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgD,EAAAjD,KAAA,GAAAiD,EAAA3B,GAAA2B,EAAA,MAAA,IAAAA,EAAA9B,OAAA,SAoHpChC,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,sBApHI,KAAA,GAAA,IAAA,MAAA,OAAA4B,EAAA1B,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAyH7C6B,YAAc,SAAOlE,EAAKC,GAAZ,IAAAC,EAAAQ,EAAAD,EAAAN,EAAAC,EAAAC,EAAAC,EAAAW,EAAAC,EAAAC,EAAAE,EAAAyC,EAAA,OAAAnD,mBAAAC,MAAA,SAAAuD,GAAA,OAAA,OAAAA,EAAArD,KAAAqD,EAAApD,MAAA,KAAA,EAAA,OAhHMb,EAAAF,EAAAkD,OAAAhD,GAgHNiE,EAAApD,KAAA,EAAAJ,mBAAAmB,MAhHMpC,YAAAyD,QAAA,CAAAjD,GAAAA,KAgHN,KAAA,EAAA,OAhHMQ,EAgHNyD,EAAAnC,KAhHMvB,EAAAC,EAAAD,SAAAN,EAAAO,EAAAP,KAAAC,EAAAM,EAAAN,UASY+B,EAASzB,EAAAL,YAAXC,EATVI,EAAAJ,QA2HhBW,EAAcP,EAAYO,YA3HVC,EAAAR,EAAAQ,WAAAC,EAAAT,EAAAS,OAAAE,EAAAX,EAAAW,MAAAyC,EAAA,CAAA5D,GAAAA,EAA1BC,KAAAA,EAmIQC,UAAYA,EAtHd2C,YAAiB1C,EAAGC,QAAAA,EAAAW,YAAAA,EAAAC,WAAAA,EAAAC,OAAAA,EAAAC,MAAApB,EAAAgB,KAAAI,MAChBlB,MAAKF,EADWS,SAAAA,GAmGN0D,EAAArD,KAAA,GAAAqD,EAAApD,KAAA,GAAAJ,mBAAAmB,MAgCWpC,YAAYuE,iBAAiB,CAAEb,UAAWlD,GAAO4D,IAhC5D,KAAA,GAAA,GAAAK,EAAAnC,KAAA,OAAAmC,EAAAlC,OAAA,SAnGMhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,0BAmGNgC,EAAApD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAoD,EAAAlC,OAAA,SAnGMhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAmGN,KAAA,GAAAgC,EAAApD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAoD,EAAArD,KAAA,GAAAqD,EAAA/B,GAAA+B,EAAA,MAAA,IAAAA,EAAAlC,OAAA,SAnGMhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAQJ,sBA2FF,KAAA,GAAA,IAAA,MAAA,OAAAgC,EAAA9B,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAzFoB+B,aAVd,SAAApE,EAAAC,GAAA,IAAAC,EAAAQ,EAAAD,EAAAN,EAAAC,EAAAC,EAAAC,EAAAW,EAAAC,EAAAC,EAAAC,EAAA0C,EAAA,OAAAnD,mBAAAC,MAAA,SAAAyD,GAAA,OAAA,OAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,KAAA,EAAA,OAkJhBb,EAAKF,EAAIkD,OAAOhD,GAlJAmE,EAAAtD,KAAA,EAAAJ,mBAAAmB,MAAApC,YAAAyD,QAAA,CAAAjD,GAAAA,KAAA,KAAA,EAAA,OAAAQ,EAAA2D,EAAArC,KAsJhBvB,EAAWC,EAAYD,SAtJPN,EAAAO,EAAAP,KAAAC,EAAAM,EAAAN,UAAAC,EAAAK,EAAAL,YAaY8B,EAAOzB,EAAEJ,QAAXW,EAbVP,EAAAO,YA6JhBC,EAAaR,EAAYQ,WA7JTC,EAAAT,EAAAS,OAAAC,EAAAV,EAAAU,MAAA0C,EAAA,CAAA5D,GAAAA,EAAAC,KAAAA,EAA1BC,UAAAA,EAqKQC,YAAcA,EApJhBiE,QAAahE,EAAGW,YAAAA,EAAAC,WAAAA,EAAAC,OAAAA,EAAAC,MAAAA,EAAAC,MAAArB,EAAAgB,KAAAK,MACdiC,SAAQtD,GAlBUqE,EAAAvD,KAAA,GAAAuD,EAAAtD,KAAA,GAAAJ,mBAAAmB,MAiBJpC,YAAAuE,iBAAA,CAAA/D,GAAAA,GAAA4D,IAjBI,KAAA,GAAA,GAAAO,EAAArC,KAAA,OAAAqC,EAAApC,OAAA,SAmLPhC,EAAIkB,OAAO,KAAKe,KAAK,CAACC,QAAS,0BAnLxBkC,EAAAtD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAsD,EAAApC,OAAA,SAiBJhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAjBI,KAAA,GAAAkC,EAAAtD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAsD,EAAAvD,KAAA,GAAAuD,EAAAjC,GAAAiC,EAAA,MAAA,IAAAA,EAAApC,OAAA,SAuBK9B,EAAMgB,OAAA,KAAAe,KAAA,CAAAC,QAAA,sBAvBX,KAAA,GAAA,IAAA,MAAA,OAAAkC,EAAAhC,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAwBVpC,kBAAS0D,SAAT3D,EAAAC,GAAS0D,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAEZzD,EAHDF,EAAAkD,OAAAhD,GACayD,EAAAA,KAAAA,EAAAA,mBAAAA,MAPHjE,YAAAyD,QAAA,CAAAjD,GAAAA,KAOGyD,KAAAA,EAAAA,OAPHjD,EAOGiD,EAAAA,KAPHlD,EAAAC,EAAAD,SAWoB0B,EAAAA,EAAShC,KAAXC,EAXlBM,EAAAN,UAuLZC,EAAcK,EAAYL,YAvLdC,EAAAI,EAAAJ,QAAAY,EAAAR,EAAAQ,WAAAC,EAAAT,EAAAS,OA2LZC,EAAQV,EAAYU,MA3LRC,EAAAX,EAAAW,MAAAyC,EAAA,CAAA5D,GAAAA,EAcgBiC,KAAAA,EAAF/B,UAddA,EAkMdC,YAAcA,EAlMAC,QAAAA,EAAAW,YAAAjB,EAAAgB,KAAAC,YAAAC,WAAAA,EAAAC,OAAAA,EAAAC,MAAAA,EAAAC,MAAAA,EAAtBZ,SAAAA,GAOyBkD,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,mBAAAA,MAWDjE,YAAAuE,iBAAA,CAAA/D,GAAAA,GAAA4D,IAXCH,KAAAA,GAAAA,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,OAAAA,SAWD1D,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,0BAXCwB,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SAWD1D,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAXCwB,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,IAAAA,EAAAA,OAAAA,SAebX,EAJY7B,OAAA,KAAAe,KAAA,CAAAC,QAAA,sBAXCwB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,GAAAA,OAWDY,iBAAA,SAAAvE,EAAAC,GAAA,IAAAC,EAAAQ,EAAAD,EAAAN,EAAAC,EAAAC,EAAAC,EAAAW,EAAAE,EAAAC,EAAAC,EAAAyC,EAAA,OAAAnD,mBAAAC,MAAA,SAAA4D,GAAA,OAAA,OAAAA,EAAA1D,KAAA0D,EAAAzD,MAAA,KAAA,EAAA,OA2Mdb,EAAKF,EAAIkD,OAAOhD,GA3MFsE,EAAAzD,KAAA,EAAAJ,mBAAAmB,MAMgBpC,YAAAyD,QAAA,CAAAjD,GAAAA,KANhB,KAAA,EAAA,OAMOI,EANPkE,EAAAxC,KAM8CyB,EAAAA,EAAUhD,SAAnDN,EAAjBO,EAAmFiD,KAC/E1D,EAAS0D,EAATvD,UAEHC,EAHDK,EAAAL,YANYC,EAAAI,EAAAJ,QAAAW,EAAAP,EAAAO,YAsNdE,EAAST,EAAYS,OAtNPC,EAAAV,EAAAU,MAAAC,EAAAX,EAAAW,MAWgByC,EAXhB,CA2NhB5D,GAAKA,EA3NWC,KAAAA,EAAAC,UAAAA,EAAAC,YAAAA,EA+NhBC,QAAUA,EA/NMW,YAAAA,EAAAC,WAAAlB,EAAAgB,KAAAE,WAAAC,OAAAA,EAAAC,MAAAA,EAcce,MAAAA,EAAF1B,SAdZA,GAAA+D,EAAA1D,KAAA,GAAA0D,EAAAzD,KAAA,GAAAJ,mBAAAmB,MAAApC,YAAAuE,iBAAA,CAAA/D,GAAAA,GAAA4D,IAAA,KAAA,GAAA,GAAAU,EAAAxC,KAAA,OAAAwC,EAAAvC,OAAA,SAAAhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,0BAAAqC,EAAAzD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAyD,EAAAvC,OAAA,SAkBlBwC,EAAetD,OAAA,KAAfsD,KAAAA,CAAAA,QAA2BxE,2BAlBT,KAAA,GAAAuE,EAAAzD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAyD,EAAA1D,KAAA,GAAA0D,EAAApC,GAAAoC,EAAA,MAAA,IAAAA,EAAAvC,OAAA,SAkBHhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,sBAlBG,KAAA,GAAA,IAAA,MAAA,OAAAqC,EAAAnC,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAqB2Be,cAAS,SAAGlD,EAAAA,GAAH,IAAAA,EAAAQ,EAAAD,EAAAN,EAAAC,EAAAC,EAAAC,EAAAW,EAAAC,EAAAG,EAAAyC,EAAA,OAAAnD,mBAAAC,MAAA,SAAA8D,GAAA,OAAA,OAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,KAAA,EAAA,OAAVb,EAH7BF,EAAAkD,OAAAhD,GAGuCwE,EAAA3D,KAAA,EAAAJ,mBAAAmB,MAHvCpC,YAAAyD,QAAA,CAAAjD,GAAAA,KAGuC,KAAA,EAAA,OAHvCQ,EAGuCgE,EAAA1C,KAElDvB,EAAWC,EAAYD,SAGvBL,EAAAA,EAAYM,KACZL,EATWK,EASGA,UACdJ,EAAUI,EAAYJ,YACtBW,EAAAA,EAAcP,QACdQ,EAAaR,EAAYQ,YACzBE,EAAQV,EAbGQ,WAcXG,EAAQX,EAAYW,MAGtBnB,EADiB,CAEjBC,GAAAA,EACAC,KAAAA,EACAC,UAAAA,EACAC,YAAUA,EACVW,QAAAA,EACAC,YAAUD,EACVE,WAASnB,EACToB,OAAKpB,EAAGoB,KATSD,OAUjBE,MAAAA,EAAOA,KAVUD,MAWjBX,MAAAA,EAXiBA,SAhBJA,GAGuCiE,EAAA5D,KAAA,GAAA4D,EAAA3D,KAAA,GAAAJ,mBAAAmB,MAHvCpC,YAAAuE,iBAAA,CAAA/D,GAAAA,GAAA4D,IAGuC,KAAA,GAAA,GAAAY,EAAA1C,KAAA,OAAA0C,EAAAzC,OAAA,SAHvChC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,0BAGuCuC,EAAA3D,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA2D,EAAAzC,OAAA,SA8BjD0C,EAAAA,OAjCU,KAAAzC,KAAA,CAAAC,QAAA,2BAGuC,KAAA,GAAAuC,EAAA3D,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA2D,EAAA5D,KAAA,GAAA4D,EAAAtC,GAAAsC,EAAA,MAAA,IAAAA,EAAAzC,OAAA,SA2Q7ChC,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,sBA3Qa,KAAA,GAAA,IAAA,MAAA,OAAAuC,EAAArC,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAHvCuC,SAAA,SAAA5E,EAAAC,GAAA,IAAAqD,EAAAuB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAxE,mBAAAC,MAAA,SAAAwE,GAAA,OAAA,OAAAA,EAAAtE,KAAAsE,EAAArE,MAAA,KAAA,EAAA,OAAAuC,EAAAtD,EAAAkD,OAAAhD,GAAAqD,OAqCiBpB,QAAAA,IAAAA,YArCjBiD,EAAAtE,KAAA,EAAAsE,EAAArE,KAAA,EAAAJ,mBAAAmB,MAAApC,YAAAyD,QAAA,CAAAjD,GAAAoD,KAAA,KAAA,EAAA,GAAAuB,EAAAO,EAAApD,KAAA,OAAA8C,EAAAD,EAAAxD,MAAAI,IAAAsD,EAAAF,EAAAxD,MAAAK,IAAAsD,EAAAH,EAAAxD,MAAAM,IAAAsD,EAAAJ,EAyCN5E,MAAIkB,KAAmBgB,EAAS0C,EAAAxD,MAAAQ,IAzC1BsD,EAAAL,EAAAC,EAAAC,EAAAC,EAAAC,EAAAE,EAAAnD,OAAA,SA8CDhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAmD,MAAAF,KA9CCC,EAAArE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAqE,EAAAnD,OAAA,SA8CDhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,gCA9CC,KAAA,GAAAiD,EAAArE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAqE,EAAAtE,KAAA,GAAAsE,EAAAhD,GAAAgD,EAAA,MAAA,GAAAA,EAAAnD,OAAA,SA8CDhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAGUzC,2BAjDT,KAAA,GAAA,IAAA,MAAA,OAAA0F,EAAA/C,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA8CDiD,YAAA,SAAAtF,EAAAC,GAAA,IAAAqD,EAAAuB,EAAAC,EAAA,OAAAnE,mBAAAC,MAAA,SAAA2E,GAAA,OAAA,OAAAA,EAAAzE,KAAAyE,EAAAxE,MAAA,KAAA,EAAA,OAGVL,EAAAA,EAAAA,OAHUR,GAAAqD,OAAAgC,EAAAzE,KAAA,EAAAyE,EAAAxE,KAAA,EAAAJ,mBAAAmB,MASgBzB,YAThB8C,QAAA,CAAAjD,GAAAoD,KAAA,KAAA,EAAA,GASVjD,EATUkF,EAAAvD,KAAA,OAAA8C,EAaDpE,EAbCW,MAAAI,IAAA8D,EAAAtD,OAAA,SAgBV6B,EAhBU3C,OAgBK,KAAAe,KAAA,CAAAmD,MAAAP,KAhBLS,EAAAxE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAwE,EAAAtD,OAAA,SAmBZ7B,EAAYA,OAAAA,KAHK8B,KAAA,CAAAC,QAAA,gCAhBL,KAAA,GAAAoD,EAAAxE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAwE,EAAAzE,KAAA,GAAAyE,EAAAnD,GAAAmD,EAAA,MAAA,GAAAA,EAAAtD,OAAA,SAsBZhB,EAAAA,OAAcA,KAAAA,KANG,CAAAkB,QAAA,2BAhBL,KAAA,GAAA,IAAA,MAAA,OAAAoD,EAAAlD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA0BZhB,YAAOA,SAVUrB,EAAAC,GAUVoB,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OACPZ,EAAAA,EAAQyC,OAAEzC,GAAAA,OADHY,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MA1BK3B,YAgCWA,QAAYuE,CAAAA,GAAAA,KAN5B5C,KAAAA,EAAAA,GA1BKwD,EA0BLxD,EAAAA,KAAAA,OA1BK0D,EAAAF,EAAAxD,MAAAK,IA0BLL,EAAAA,OAAAA,SA+QGpB,EAAIkB,OAAO,KAAKe,KAAK,CAACmD,MAAQN,KA/QjC1D,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SA1BKpB,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,gCA0BLd,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,OAAAA,SA1BKpB,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAkCE,2BARPd,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OA1BKmE,YAAA,SAAAxF,EAAAC,GAAA,IAAAqD,EAAAuB,EAAAG,EAAA,OAAArE,mBAAAC,MAAA,SAAA6E,GAAA,OAAA,OAAAA,EAAA3E,KAAA2E,EAAA1E,MAAA,KAAA,EAAA,OAAAuC,EAAAtD,EAAAkD,OAAAhD,GAAAqD,OAAAkC,EAAA3E,KAAA,EAAA2E,EAAA1E,KAAA,EAAAJ,mBAAAmB,MAAApC,YAAAyD,QAAA,CAAAjD,GAAAoD,KAAA,KAAA,EAAA,GAAAuB,EAAAY,EAAAzD,KAAA,OAAAgD,EAAAH,EAAAxD,MAAAM,IAAA8D,EAAAxD,OAAA,SAAAhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAmD,MAAAL,KAAAS,EAAA1E,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA0E,EAAAxD,OAAA,SAAAhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,gCAAA,KAAA,GAAAsD,EAAA1E,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA0E,EAAA3E,KAAA,GAAA2E,EAAArD,GAAAqD,EAAA,MAAA,GAAAA,EAAAxD,OAAA,SAAAhC,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAAA,KAAA,GAAA,IAAA,MAAA,OAAAsD,EAAApD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAqD,aAAA,SAAA1F,EAAAC,GAAA,IAAAqD,EAAAuB,EAAAI,EAAA,OAAAtE,mBAAAC,MAAA,SAAA+E,GAAA,OAAA,OAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,KAAA,EAAA,OAApBuC,EAAAtD,EAAAkD,OAAAhD,GAAAqD,OAAoBoC,EAAA7E,KAAA,EAAA6E,EAAA5E,KAAA,EAAAJ,mBAAAmB,MA8CCpC,YAAAyD,QAAA,CAAAjD,GAAAoD,KA9CD,KAAA,EAAA,GA8CCuB,EA9CDc,EAAA3D,KAAA,OA+CLhC,EADM6E,EAAAxD,MAAAO,KA9CD+D,EAAA1D,OAAA,SA8CChC,EAAAkB,OAAA,KAAAe,KAAA,CAAAmD,MAGS3F,KAjDViG,EAAA5E,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA4E,EAAA1D,OAAA,SAsVDhC,EAAIkB,OAAO,KAAKe,KAAK,CAAEC,QAAS,gCAtV/B,KAAA,GAAAwD,EAAA5E,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA4E,EAAA7E,KAAA,GAAA6E,EAAAvD,GAAAuD,EAAA,MAAA,GAAAA,EAAA1D,OAAA,SAmDVxB,EALWU,OAKAT,KAAAA,KAAYD,CAAAA,QALZ,2BA9CD,KAAA,GAAA,IAAA,MAAA,OAAAkF,EAAAtD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAwDV/B,YAAUI,SAAAA,EAAWT,GAAXS,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OACVO,EAAAA,EAAAA,OAAcP,GAAAA,OADJA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAMKhB,YAAAyD,QAAA,CAAAjD,GAAAoD,KANL5C,KAAAA,EAAAA,GAMVoD,EANUpD,EAAAA,KAAAA,OAUZL,EAAcA,EAJGgB,MAAAQ,IANLnB,EAAAA,OAAAA,SAYZO,EAAAA,OAAcA,KAAAA,KANG,CAAAoE,MAAAH,KANLxE,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SAeJU,EAAAA,OATS,KAAAc,KAAA,CAAAC,QAAA,gCANLzB,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,OAAAA,SAVCT,EAAAkB,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAUDzB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAsBwCkF,OAAAC,QAAa/B,CAsSrE/D,gBAAAA,gBAtUiBiE,kBAAAA,kBAgCPW,kBAAAA,kBAySVL,cAAAA,cAzUiBV,gBAAAA,gBAAAa,aAAAA,aAAAP,YAAAA,YAAAE,aAAAA,aA8UjB0B,cAAAA,cA9UiBlB,SAAAA,SAkCoBzC,YAAAA,YAAD4D,YAAAA,YAgTpCP,YAAAA,YAlViBE,aAAAA,aAAAM,YAAAA,YAqCiB7D,MAAAA,MAAF8D,kBAAAA,kBAkThC1B,iBAAAA","file":"station.controller.min.js","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\nconst bcrypt = require('bcryptjs');\r\nconst auth = require('../middlewares/token')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = req.body.queue;\r\n    const pwd = req.body.password;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime : 0,\r\n        finishtime : 0,\r\n        status : 0,\r\n        stock : {diesel :0 , petrol: 0},\r\n        queue : {Car :0 , Van: 0 , Bus: 0 , Bike: 0 , Tuk: 0},\r\n        password\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst login = async (req, res) => {\r\n    const id = req.body.id;\r\n    const password = req.body.password;\r\n\r\n    try {\r\n        const fuelStation = await FuelStation.findOne({ id: id });\r\n        if (fuelStation) {\r\n            if (fuelStation && bcrypt.compareSync(password, fuelStation.password)) {\r\n                const token = auth.generateAccessToken(id);\r\n                \r\n                return res.status(200).send({ ...fuelStation.toJSON(), token  });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n\r\nconst getAllFuelStation = async (req,res) =>{\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if(fuelStations) {\r\n            return res.json(fuelStations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: req.body.queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateArrivalTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : req.body.arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateFinishTime = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : req.body.finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const password = fuelStation.password;\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n        password: password\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n         \r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n           return res.status(200).send({count : allCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n           return res.status(200).send({count : carCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n           return res.status(200).send({count : vanCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n           return res.status(200).send({count : busCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n           return res.status(200).send({count : bikeCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getTukCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n           return res.status(200).send({count : tukCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount,\r\n    login,\r\n    updateArrivalTime,\r\n    updateFinishTime\r\n    \r\n}"]}