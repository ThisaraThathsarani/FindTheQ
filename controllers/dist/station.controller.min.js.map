{"version":3,"sources":["station.controller.js"],"names":["FuelStation","require","request","StationRegister","req","res","id","name","ownername","phonenumber","address","arrivaltime","finishtime","status","stock","queue","fuelStation","regeneratorRuntime","async","_context","prev","next","body","Number","awrap","save","sent","abrupt","send","message","t0","console","log","stop","getAllFuelStation","fuelStations","_context2","find","json","getOneFuelStation","station","_context3","params","findOne","stationid","searchStation","value","_context4","trim","$regex","$options","then","stations","searchByAddress","_context5","changeStatus","_context6","findOneAndUpdate","updatestock","_context7","updatelength","_context8","updateDetails","_context9","updateStatus","getcount","fuealStationData","carCount","vanCount","busCount","bikeCount","tukCount","allCount","_context10","Car","Van","Bus","Bike","Tuk","count","response","_context11","getVanCount","_context12","getBusCount","_context13","_context15","module","exports","getTukCount"],"mappings":"aAAA,IAAMA,YAAcC,QAAQ,oCACRA,QAAQ,WAApBC,iBAAAA,QAEFC,gBAAkB,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACdf,EAHUL,EAAAA,KAAQK,GAApBJ,EAISE,EAAIkB,KAJbpB,KAKEM,EAAYJ,EAAIkB,KAAKd,UAHzBL,EAAkBC,EAAAkB,KAAlBnB,YAAkBO,EAAAN,EAAAkB,KAAAZ,QAAAC,EAAAP,EAAAkB,KAAAX,YAAAC,EAAAR,EAAAkB,KAAAV,WAAAC,EAAAT,EAAAkB,KAAAT,OAAAC,EAAAV,EAAAkB,KAAAR,MACdR,EAAQiB,OAAMjB,EADAgB,KAAAP,OAGdP,EAAYJ,IAAIkB,YAHF,CAIdb,GAAAA,EACAC,KAAAA,EACAC,UAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,WAAAA,EAEAC,OAAAA,EACFV,MAAAA,EACAC,MAAAA,IAdgBY,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAAAJ,mBAAAO,MAkBhBb,EANgCc,QAZhB,KAAA,GAAA,GAAAN,EAAAO,KAAA,OAAAP,EAAAQ,OAAA,SAoBVtB,EAANQ,OARgC,KAAAe,KAAA,CAAAC,QAAA,+CAZhBV,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAQ,OAAA,SAsBhBZ,EAAAA,OAAAA,KAAAA,KAAAA,CAAAA,QAAAA,2BAtBgB,KAAA,GAAAI,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,MAAA,IAAAY,QAAAC,IAAAb,EAAAW,IAAAX,EAAAQ,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QA0BKb,4DA1BL,KAAA,GAAA,IAAA,MAAA,OAAAG,EAAAc,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAAAC,kBAAA,SAAA9B,EAAAC,GAAA,IAAA8B,EAAA,OAAAlB,mBAAAC,MAAA,SAAAkB,GAAA,OAAA,OAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,KAAA,EAAA,OAAAe,EAAAhB,KAAA,EAAAgB,EAAAf,KAAA,EAAAJ,mBAAAO,MAAAxB,YAAAqC,QAAA,KAAA,EAAA,GAAAF,EAAAC,EAAAV,KAAA,OAAAU,EAAAT,OAAA,SAAAtB,EAAAiC,KAAAH,IAAAC,EAAAf,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAe,EAAAT,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,iCAAA,KAAA,EAAAO,EAAAf,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAe,EAAAhB,KAAA,GAAAgB,EAAAN,GAAAM,EAAA,MAAA,GAAAA,EAAAT,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QA8BDhB,2BA9BC,KAAA,GAAA,IAAA,MAAA,OAAAuB,EAAAH,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAM,kBAAA,SAAAnC,EAAAC,GAAA,IAAAC,EAAAkC,EAAA,OAAAvB,mBAAAC,MAAA,SAAAuB,GAAA,OAAA,OAAAA,EAAArB,KAAAqB,EAAApB,MAAA,KAAA,EAAA,OAAAf,EAAAF,EAAAsC,OAAApC,GAAAmC,EAAArB,KAAA,EAAAqB,EAAApB,KAAA,EAAAJ,mBAAAO,MAAAxB,YAAA2C,QAAA,CAAAC,UAAAtC,KAAA,KAAA,EAAA,GAAAkC,EAAAC,EAAAf,KAAA,OAAAe,EAAAd,OAAA,SAAAtB,EAAAiC,KAAAE,IAAAC,EAAApB,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAoB,EAAAd,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAAA,KAAA,GAAAY,EAAApB,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAoB,EAAArB,KAAA,GAAAqB,EAAAX,GAAAW,EAAA,MAAA,GAAAA,EAAAd,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAAA,KAAA,GAAA,IAAA,MAAA,OAAAY,EAAAR,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAY,cAAA,SAAAzC,EAAAC,GAAA,IAAAyC,EAAA,OAAA7B,mBAAAC,MAAA,SAAA6B,GAAA,OAAA,OAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,KAAA,EAAA,OAAxByB,EAAA1C,EAAAsC,OAAAnC,KAAAyC,OAAwBD,EAAA3B,KAAA,EAAA2B,EAAA1B,KAAA,EAAAJ,mBAAAO,MAwCExB,YAAAqC,QAxCF,KAAA,EAAA,IAAAU,EAAArB,KAAA,CAAAqB,EAAA1B,KAAA,EAAA,MAwCErB,YAAAqC,KAAA,CAAA9B,KAAA,CAAA0C,OAAA,IAAAH,EAAA,KAAAI,SAAA,OAAAC,KAAA,SAAAC,GAAA/C,EAAAiC,KAAAc,KAxCFL,EAAA1B,KAAA,GAAA,MAAA,KAAA,EAAA,OAAA0B,EAAApB,OAAA,SAwCEtB,EAAAQ,OAAA,KAAAe,KAAA,CAEO5B,QAAAA,2BA1CT,KAAA,GAAA+C,EAAA1B,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA0B,EAAA3B,KAAA,GAAA2B,EAAAjB,GAAAiB,EAAA,MAAA,GAAAA,EAAApB,OAAA,SA0CZQ,EAAAA,OAFc,KAAAP,KAAA,CAAAC,QAAA,2BAxCF,KAAA,GAAA,IAAA,MAAA,OAAAkB,EAAAd,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAwCEoB,gBAAA,SAAAjD,EAAAC,GAAA,IAAAyC,EAAA,OAAA7B,mBAAAC,MAAA,SAAAoC,GAAA,OAAA,OAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,KAAA,EAAA,OAAAyB,EAAA1C,EAAAsC,OAAAhC,QAAAsC,OAAAM,EAAAlC,KAAA,EAAAkC,EAAAjC,KAAA,EAAAJ,mBAAAO,MAoDExB,YAAYqC,QApDd,KAAA,EAAA,IAAAiB,EAAA5B,KAAA,CAAA4B,EAAAjC,KAAA,EAAA,MAAArB,YAAAqC,KAAA,CAAA3B,QAAA,CAAAuC,OAMHpC,IAAOiC,EAAX,KAAqBI,SAAA,OAAAC,KAAA,SAAAC,GAACvB,EAAOS,KAAEc,KANxBE,EAAAjC,KAAA,GAAA,MAAA,KAAA,EAAA,OAAAiC,EAAA3B,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAAA,KAAA,GAAAyB,EAAAjC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAiC,EAAAlC,KAAA,GAAAkC,EAAAxB,GAAAwB,EAAA,MAAA,GAAAA,EAAA3B,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAAA,KAAA,GAAA,IAAA,MAAA,OAAAyB,EAAArB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OASYJ,aAAS,SAAAzB,EAAAC,GAAA,IAAAC,EAAAU,EAAAT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAE,EAAAC,EAAAwC,EAAA,OAAAtC,mBAAAC,MAAA,SAAAsC,GAAA,OAAA,OAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,KAAA,EAAA,OAAXf,EATVF,EAAAsC,OAAApC,GASqBkD,EAAAnC,KAAA,EAAAJ,mBAAAO,MATrBxB,YAAA2C,QAAA,CAAAC,UAAAtC,KASqB,KAAA,EAAA,OATrBU,EASqBwC,EAAA9B,KATrBnB,EAAAS,EAAAT,KAAAC,EAAAQ,EAAAR,UAAAC,EAAAO,EAAAP,YAAAC,EAAAM,EAAAN,QAA1BC,EAAAK,EAAAL,YA4EUC,EAAaI,EAAYJ,WA/D7B2B,EAAAA,EAAoBzB,MAAAC,EAAAC,EAAAD,MAAAwC,EAAA,CAAAjD,GAAAA,EAAAC,KAAAA,EAChBD,UAASoC,EADOjC,YAAAA,EAAAC,QAAAA,EAAAC,YAAAA,EAKdiC,WAAShC,EAD2BC,OAJtBT,EAAAkB,KAAAT,OA4ElBC,MAAQA,EA5EUC,MAAAA,GAJqByC,EAAApC,KAAA,GAAAoC,EAAAnC,KAAA,GAAAJ,mBAAAO,MAIrBxB,YAAAyD,iBAAA,CAAAb,UAAAtC,GAAAiD,IAJqB,KAAA,GAAA,GAAAC,EAAA9B,KAAA,OAAA8B,EAAA7B,OAAA,SAwF5BtB,EAAIQ,OAAO,KAAKe,KAAK,CAACC,QAAS,0BAxFH2B,EAAAnC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAmC,EAAA7B,OAAA,SAIrBtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAJqB,KAAA,GAAA2B,EAAAnC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAmC,EAAApC,KAAA,GAAAoC,EAAA1B,GAAA0B,EAAA,MAAA,IAAAA,EAAA7B,OAAA,SA+FhCtB,EAAIQ,OAAO,KAAKe,KAAK,CAAEC,QAAS,sBA/FA,KAAA,GAAA,IAAA,MAAA,OAAA2B,EAAAvB,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAIrByB,YAAA,SAAAtD,EAAAC,GAAA,IAAAC,EAAAU,EAAAT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAE,EAAAwC,EAAA,OAAAtC,mBAAAC,MAAA,SAAAyC,GAAA,OAAA,OAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,KAAA,EAAA,OAAAf,EAAAF,EAAAsC,OAAApC,GAAAqD,EAAAtC,KAAA,EAAAJ,mBAAAO,MAAAxB,YAAA2C,QAaP9B,CAAAA,GAAOP,KAbA,KAAA,EAAA,OAAAU,EAAA2C,EAAAjC,KAaUnB,EAbVS,EAAAT,KAsGhBC,EAAYQ,EAAYR,UAtGRC,EAAAO,EAAAP,YAAAC,EAAAM,EAAAN,QAAAC,EAAAK,EAAAL,YAAAC,EAAAI,EAAAJ,WAAAC,EAAAG,EAAAH,OAAAE,EAAAC,EAAAD,MA8GhBwC,EAAe,CA7FnBV,GAAAA,EAAgBtC,KAAAA,EAAAC,UAAAA,EAAAC,YAAAA,EAAAC,QAAAA,EAAAC,YAAAA,EACdmC,WAAWlC,EADGC,OAAAA,EAAAC,MAAAV,EAAAkB,KAAAR,MAAAC,MAAAA,GAjBI4C,EAAAvC,KAAA,GAAAuC,EAAAtC,KAAA,GAAAJ,mBAAAO,MAiBJxB,YAAAyD,iBAAA,CAAAb,UAAAtC,GAAAiD,IAjBI,KAAA,GAAA,GAAAI,EAAAjC,KAAA,OAAAiC,EAAAhC,OAAA,SAiBJtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,0BAjBI8B,EAAAtC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAsC,EAAAhC,OAAA,SAuBd3B,EAAAA,OAAA,KAAiB4B,KAAA,CAAAC,QAAA,2BAvBH,KAAA,GAAA8B,EAAAtC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAsC,EAAAvC,KAAA,GAAAuC,EAAA7B,GAAA6B,EAAA,MAAA,IAAAA,EAAAhC,OAAA,SAuBWtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,sBAvBX,KAAA,GAAA,IAAA,MAAA,OAAA8B,EAAA1B,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAiBJ2B,aAAA,SAAAxD,EAAAC,GAAA,IAAAC,EAAAU,EAAAT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAyC,EAAA,OAAAtC,mBAAAC,MAAA,SAAA2C,GAAA,OAAA,OAAAA,EAAAzC,KAAAyC,EAAAxC,MAAA,KAAA,EAAA,OA2HZf,EAAKF,EAAIsC,OAAOpC,GA3HJuD,EAAAxC,KAAA,EAAAJ,mBAAAO,MAAAxB,YAAA2C,QAWC9B,CAAAA,GAAOP,KAXR,KAAA,EAAA,OAAAU,EAAA6C,EAAAnC,KAWkBnB,EAXlBS,EAAAT,KAgIZC,EAAYQ,EAAYR,UAhIZC,EAAAO,EAAAP,YAAAC,EAAAM,EAAAN,QAAAC,EAAAK,EAAAL,YAoIZC,EAAaI,EAAYJ,WApIbC,EAAAG,EAAAH,OAAAC,EAAAE,EAAAF,MAAAyC,EAAA,CAcgB1B,GAAAA,EAAFtB,KAddA,EA2IdC,UAAYA,EA3IEC,YAAAA,EAAAC,QAAAA,EAAAC,YAAAA,EAAAC,WAAAA,EAAAC,OAAAA,EAAAC,MAAAA,EAAtBC,MAAAX,EAAAkB,KAAAP,OAAsB8C,EAAAzC,KAAA,GAAAyC,EAAAxC,KAAA,GAAAJ,mBAAAO,MAkBExB,YAAAyD,iBAAA,CAAAnD,GAAAA,GAAAiD,IAlBF,KAAA,GAAA,GAAAM,EAAAnC,KAAA,OAAAmC,EAAAlC,OAAA,SAkBEtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,0BAlBFgC,EAAAxC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAwC,EAAAlC,OAAA,SAkBEtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAlBF,KAAA,GAAAgC,EAAAxC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAwC,EAAAzC,KAAA,GAAAyC,EAAA/B,GAAA+B,EAAA,MAAA,IAAAA,EAAAlC,OAAA,SAsBVa,EAJY3B,OAAA,KAAAe,KAAA,CAAAC,QAAA,sBAlBF,KAAA,GAAA,IAAA,MAAA,OAAAgC,EAAA5B,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAkBE6B,cAAA,SAAA1D,EAAAC,GAAA,IAAAC,EAAAU,EAAAT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAG,EAAAwC,EAAA,OAAAtC,mBAAAC,MAAA,SAAA6C,GAAA,OAAA,OAAAA,EAAA3C,KAAA2C,EAAA1C,MAAA,KAAA,EAAA,OAoJdf,EAAKF,EAAIsC,OAAOpC,GApJFyD,EAAA1C,KAAA,EAAAJ,mBAAAO,MAMgBxB,YAAA2C,QAAA,CAAArC,GAAAA,KANhB,KAAA,EAAA,OAMOI,EANPqD,EAAArC,KAM8CwB,EAAAA,EAAU3C,KAAxCC,EAAAQ,EAAAR,UAAXC,EAAiEO,EAAAP,YAC9EJ,EAAAW,EAAAN,QAEHC,EAHDK,EAAAL,YANYC,EAAAI,EAAAJ,WAAAG,EAAAC,EAAAD,MAAAwC,EAAA,CAAAjD,GAAAA,EAWkBuB,KAAAA,EAAFrB,UAXhBA,EAoKhBC,YAAcA,EApKEC,QAAAA,EAAAC,YAAAA,EAAAC,WAAAA,EAwKhBC,OAAST,EAAIkB,KAAKT,OAxKFC,MAAAV,EAAAkB,KAAAR,MAAAC,MAAAA,GAAAgD,EAAA3C,KAAA,GAAA2C,EAAA1C,KAAA,GAAAJ,mBAAAO,MA+KOxB,YAAYyD,iBAAiB,CAAEnD,GAAIA,GAAOiD,IA/KjD,KAAA,GAAA,GAAAQ,EAAArC,KAAA,OAAAqC,EAAApC,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,0BAAAkC,EAAA1C,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA0C,EAAApC,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAAA,KAAA,GAAAkC,EAAA1C,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA0C,EAAA3C,KAAA,GAAA2C,EAAAjC,GAAAiC,EAAA,MAAA,IAAAA,EAAApC,OAAA,SAkBlBqC,EAAenD,OAAA,KAAfmD,KAAAA,CAAAA,QAA2B3D,sBAlBT,KAAA,GAAA,IAAA,MAAA,OAAA0D,EAAA9B,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAkBHgC,SAAA,SAAA7D,EAAAC,GAAA,IAAAyC,EAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAvD,mBAAAC,MAAA,SAAAuD,GAAA,OAAA,OAAAA,EAAArD,KAAAqD,EAAApD,MAAA,KAAA,EAAA,OACXf,EAAKF,EAAIsC,OAAOpC,GADL0C,OAAAjB,QAAAC,IAAA,YAAAyC,EAAArD,KAAA,EAAAqD,EAAApD,KAAA,EAAAJ,mBAAAO,MAAAxB,YAAA2C,QAAA,CAAArC,GAAAwC,KAAA,KAAA,EAAA,GAAAoB,EAAAO,EAAA/C,KAAA,OAAAyC,EAKJnD,EALID,MAAA2D,IAMXlE,EAAYQ,EANDD,MAAA4D,IAOXlE,EAAcO,EAAYP,MAPfmE,IAQXlE,EAAUM,EARCD,MAAA8D,KASXlE,EAAcK,EAAYL,MATfmE,IAAAN,EAYHxD,EAZGoD,EAAAC,EAAAC,EAAAC,EAAAE,EAAA9C,OAAA,SAuBRtB,EAAGS,OATS,KAAAc,KAAA,CAAAmD,MAAAP,KAdJC,EAAApD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAoD,EAAA9C,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,gCAAA,KAAA,GAAA4C,EAAApD,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAoD,EAAArD,KAAA,GAAAqD,EAAA3C,GAAA2C,EAAA,MAAA,GAAAA,EAAA9C,OAAA,SA6ByCiB,EAAAA,OAAWtC,KAAAA,KAAAA,CAAAA,QAAAA,2BA7BpD,KAAA,GAAA,IAAA,MAAA,OAAAmE,EAAAxC,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA6BP+C,YA7BO,SAAA5E,EAAAC,GAAA,IAAAyC,EAAAoB,EAAAC,EAAA,OAAAlD,mBAAAC,MAAA,SAAA+D,GAAA,OAAA,OAAAA,EAAA7D,KAAA6D,EAAA5D,MAAA,KAAA,EAAA,OAgNbyB,EAAQ1C,EAAIsC,OAAOpC,GAAG0C,OAhNTiC,EAAA7D,KAAA,EAAA6D,EAAA5D,KAAA,EAAAJ,mBAAAO,MAAAxB,YAAA2C,QAAA,CAAArC,GAAAwC,KAAA,KAAA,EAAA,GAAAoB,EAAAe,EAAAvD,KAAA,OAAAyC,EAAAD,EAAAnD,MAAA2D,IAAAO,EAAAtD,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAmD,MAAAZ,KAAAc,EAAA5D,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA4D,EAAAtD,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,gCAAA,KAAA,GAAAoD,EAAA5D,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA4D,EAAA7D,KAAA,GAAA6D,EAAAnD,GAAAmD,EAAA,MAAA,GAAAA,EAAAtD,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAAA,KAAA,GAAA,IAAA,MAAA,OAAAoD,EAAAhD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAiD,YAAA,SAAA9E,EAAAC,GAAA,IAAAyC,EAAAoB,EAAAE,EAAA,OAAAnD,mBAAAC,MAAA,SAAAiE,GAAA,OAAA,OAAAA,EAAA/D,KAAA+D,EAAA9D,MAAA,KAAA,EAAA,OAAAyB,EAAA1C,EAAAsC,OAAApC,GAAA0C,OAAAmC,EAAA/D,KAAA,EAAA+D,EAAA9D,KAAA,EAAAJ,mBAAAO,MAyOgBxB,YAAY2C,QAAQ,CAACrC,GAAKwC,KAzO1C,KAAA,EAAA,GAyOToB,EAzOSiB,EAAAzD,KAAA,OAAA0C,EAAAF,EAAAnD,MAAA4D,IAAAQ,EAAAxD,OAAA,SAAAtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAmD,MAAAX,KAAAe,EAAA9D,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA8D,EAAAxD,OAAA,SA2CDtB,EAAAQ,OAAd6C,KAAAA,KAAqBtD,CAAPyB,QAAA,gCA3CC,KAAA,GAAAsD,EAAA9D,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA8D,EAAA/D,KAAA,GAAA+D,EAAArD,GAAAqD,EAAA,MAAA,GAAAA,EAAAxD,OAAA,SA2CDtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BA3CC,KAAA,GAAA,IAAA,MAAA,OAAAsD,EAAAlD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA2CDmD,YAAA,SAAAhF,EAAAC,GAAA,IAAAyC,EAAAoB,EAAAG,EAAA,OAAApD,mBAAAC,MAAA,SAAAmE,GAAA,OAAA,OAAAA,EAAAjE,KAAAiE,EAAAhE,MAAA,KAAA,EAAA,OAAAyB,EAAA1C,EAAAsC,OAAApC,GAAA0C,OAAAqC,EAAAjE,KAAA,EAAAiE,EAAAhE,KAAA,EAAAJ,mBAAAO,MAAAxB,YAAA2C,QAAA,CAAArC,GAAAwC,KAAA,KAAA,EAAA,GAAAoB,EAAAmB,EAAA3D,KAAA,OAOVjB,EAAcO,EAAYP,MAPhBmE,IAAAS,EAAA1D,OAAA,SASVhB,EATUE,OASIG,KAAAA,KAAYL,CAAAA,MAThB0D,KAAAgB,EAAAhE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgE,EAAA1D,OAAA,SAYFX,EAAAA,OAAYD,KAZVa,KAAA,CAAAC,QAAA,gCAAA,KAAA,GAAAwD,EAAAhE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgE,EAAAjE,KAAA,GAAAiE,EAAAvD,GAAAuD,EAAA,MAAA,GAAAA,EAAA1D,OAAA,SAgBZpB,EAAOA,OAFU,KAAAqB,KAAA,CAAAC,QAAA,2BAdL,KAAA,GAAA,IAAA,MAAA,OAAAwD,EAAApD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAoBZtB,aAAAA,SAAcA,EAAAA,GAAdA,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAAaA,GAAAA,OADbD,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MApBYX,YAAA2C,QAAA,CAAArC,GAAAwC,KAoBZnC,KAAAA,EAAAA,GApBYuD,EAoBZvD,EAAAA,KAAAA,OASsDiC,EAAWtC,EAAAA,MAAAA,KATjEK,EAAAA,OAAAA,SA0NUN,EAAIQ,OAAO,KAAKe,KAAK,CAACmD,MAAQT,KA1NxC3D,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SA6NWN,EAAIQ,OAAO,KAAKe,KAAK,CAAEC,QAAS,gCA7N3ClB,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,OAAAA,SApBYN,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BAoBZlB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAWiCkB,YAAO,SAAEzB,EAAAC,GAAF,IAAAyC,EAAAoB,EAAAK,EAAA,OAAAtD,mBAAAC,MAAA,SAAAoE,GAAA,OAAA,OAAAA,EAAAlE,KAAAkE,EAAAjE,MAAA,KAAA,EAAA,OAARyB,EA/BpB1C,EAAAsC,OAAApC,GAAA0C,OA+B4BsC,EAAAlE,KAAA,EAAAkE,EAAAjE,KAAA,EAAAJ,mBAAAO,MAGDxB,YAAA2C,QAAA,CAAArC,GAAAwC,KAHC,KAAA,EAAA,GAGVjB,EAHUyD,EAAA5D,KAAA,OA/B5B6C,EAAAL,EAAAnD,MAAA+D,IA+B4BQ,EAAA3D,OAAA,SAoO9BtB,EAAIQ,OAAO,KAAKe,KAAK,CAACmD,MAAQR,KApOAe,EAAAjE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAiE,EAAA3D,OAAA,SA/B5BtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,gCA+B4B,KAAA,GAAAyD,EAAAjE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAiE,EAAAlE,KAAA,GAAAkE,EAAAxD,GAAAwD,EAAA,MAAA,GAAAA,EAAA3D,OAAA,SA/B5BtB,EAAAQ,OAAA,KAAAe,KAAA,CAAAC,QAAA,2BA+B4B,KAAA,GAAA,IAAA,MAAA,OAAAyD,EAAArD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA/B5BsD,OAAAC,QAAA,CAAArF,gBAAAA,gBAAA+B,kBAAAA,kBAApBK,kBAAAA,kBAkRIM,cAAAA,cAvOEe,gBAAAA,gBAAeI,aAAAA,aAAAN,YAAAA,YAAAE,aAAAA,aAAAE,cAAAA,cAAAG,SAAAA,SACX3D,YAAAA,YADW4E,YAAAA,YAAAE,YAAAA,YAG8B9E,aAAAA,aAADmF,YAAAA","file":"station.controller.min.js","sourcesContent":["const FuelStation = require('../models/station.model');\r\nconst { request } = require('express')\r\n\r\nconst StationRegister = async (req, res) => {\r\n    const id = req.body.id;\r\n    const name = req.body.name;\r\n    const ownername = req.body.ownername;\r\n    const phonenumber = req.body.phonenumber;\r\n    const address = req.body.address;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const finishtime = req.body.finishtime;\r\n    const status = req.body.status;\r\n    const stock = req.body.stock;\r\n    const queue = Number(req.body.queue);\r\n\r\n    const fuelStation = new FuelStation({\r\n        id,\r\n        name,\r\n        ownername,\r\n        phonenumber,\r\n        address,\r\n        arrivaltime,\r\n        finishtime,\r\n        status,\r\n        stock,\r\n        queue\r\n    })\r\n\r\n    try {\r\n        let response = await fuelStation.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New Station Registered to the Fuel System\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while registering the station to the application\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst getAllFuelStation = async (req,res) =>{\r\n    try {\r\n        let fuelStations = await FuelStation.find();\r\n        if(fuelStations) {\r\n            return res.json(fuelStations)\r\n        }else {\r\n            return res.status(404).send({message: 'Error on retrieving station'})\r\n        }\r\n    }catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneFuelStation = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    try {\r\n        let station = await FuelStation.findOne({\r\n            stationid: id \r\n        });\r\n        if(station) {\r\n            return res.json(station)\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchStation = async (req, res) => {\r\n    let value = req.params.name.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ name: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst searchByAddress = async (req, res) => {\r\n    let value = req.params.address.trim();\r\n\r\n    try {\r\n        let station = await FuelStation.find();\r\n        if(station) {\r\n            FuelStation.find({ address: { $regex: \"^\" + value + \".*\", $options: 'i' } }).then((stations) => {\r\n                res.json(stations)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such station found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateStatus = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({stationid : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const stock = fuelStation.stock;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatestock = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ stationid: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updatelength = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const status = fuelStation.status;\r\n    const stock = fuelStation.stock;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : status,\r\n        stock : stock,\r\n        queue: req.body.queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst updateDetails = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    const fuelStation = await FuelStation.findOne({id : id});\r\n\r\n    const name = fuelStation.name;\r\n    const ownername = fuelStation.ownername;\r\n    const phonenumber = fuelStation.phonenumber;\r\n    const address = fuelStation.address;\r\n    const arrivaltime = fuelStation.arrivaltime;\r\n    const finishtime = fuelStation.finishtime;\r\n    const queue = fuelStation.queue;\r\n\r\n    const changeStatus = {\r\n        id : id,\r\n        name : name,\r\n        ownername : ownername,\r\n        phonenumber : phonenumber,\r\n        address : address,\r\n        arrivaltime : arrivaltime,\r\n        finishtime : finishtime,\r\n        status : req.body.status,\r\n        stock : req.body.stock,\r\n        queue: queue,\r\n\r\n    }\r\n\r\n    try {\r\n        const response = await FuelStation.findOneAndUpdate({ id: id } , changeStatus);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully updated'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.id.trim();\r\n    console.log(\"carcount\");\r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n            let vanCount = fuealStationData.queue.Van;\r\n            let busCount = fuealStationData.queue.Bus;\r\n            let bikeCount = fuealStationData.queue.Bike;\r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n\r\n            let allCount = carCount + vanCount + busCount + bikeCount + tukCount;\r\n         \r\n            // let countObject = {\r\n            //     carCount : carCount,\r\n            //     vanCount : vanCount,\r\n            //     busCount : busCount,\r\n            //     bikeCount : bikeCount,\r\n            //     allCount : allCount\r\n            // }\r\n\r\n           return res.status(200).send({count : allCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getCarCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let carCount = fuealStationData.queue.Car;\r\n\r\n           return res.status(200).send({count : carCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getVanCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let vanCount = fuealStationData.queue.Van;\r\n\r\n           return res.status(200).send({count : vanCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBusCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let busCount = fuealStationData.queue.Bus;\r\n\r\n           return res.status(200).send({count : busCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getBikeCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let bikeCount = fuealStationData.queue.Bike;\r\n\r\n           return res.status(200).send({count : bikeCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getTukCount = async (req,res) => {\r\n    let value = req.params.id.trim();\r\n   \r\n    try {\r\n\r\n        let fuealStationData = await FuelStation.findOne({id : value});\r\n\r\n        if(fuealStationData){\r\n           \r\n            let tukCount = fuealStationData.queue.Tuk;\r\n\r\n           return res.status(200).send({count : tukCount});\r\n           \r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    StationRegister,\r\n    getAllFuelStation,\r\n    getOneFuelStation,\r\n    searchStation,\r\n    searchByAddress,\r\n    updateStatus,\r\n    updatestock,\r\n    updatelength,\r\n    updateDetails,\r\n    getcount,\r\n    getCarCount,\r\n    getVanCount,\r\n    getBusCount,\r\n    getBikeCount,\r\n    getTukCount\r\n    \r\n}"]}