{"version":3,"sources":["queue.controller.js"],"names":["Queue","require","request","registerQueue","req","res","stationname","arrivaltime","leavetime","status","vehicleType","queue","regeneratorRuntime","async","_context","prev","next","body","awrap","save","sent","abrupt","send","message","t0","console","log","response","stop","deletequeue","queueid","_context2","params","findOneAndDelete","getcount","value","_context3","trim","find","count","$regex","$options","then","queues","json","module","exports"],"mappings":"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","file":"queue.controller.min.js","sourcesContent":["const Queue = require('../models/queue.model');\r\nconst { request } = require('express')\r\n\r\nconst registerQueue = async (req, res) => {\r\n\r\n    const stationname = req.body.stationname;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const leavetime = req.body.leavetime;\r\n    const status = req.body.status;\r\n    const vehicleType = req.body.vehicleType;\r\n\r\n\r\n    const queue = new Queue({\r\n        stationname,\r\n        arrivaltime,\r\n        leavetime,\r\n        status,\r\n        vehicleType\r\n\r\n    })\r\n\r\n    try{\r\n        let response = await queue.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New customer added to the queue\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while entering the queue\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst deletequeue = async (req, res) => {\r\n    const queueid = req.params.queueid;\r\n\r\n    try {\r\n        const customer = await Queue.findOneAndDelete({ queueid:queueid });\r\n        if(customer){\r\n\r\n         return res.status(204).send({ message: 'Successfully deleted A User from queue' });\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not remove the queue' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.vehicleType.trim();\r\n\r\n    try {\r\n        let queue = await Queue.find();\r\n        if(queue){\r\n            Queue.count({vehicleType: {$regex: \"^\" + value + \".*\", $options: 'i' } }).then((queues) => {\r\n                res.json(queues)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    registerQueue,\r\n    deletequeue,\r\n    getcount\r\n}"]}