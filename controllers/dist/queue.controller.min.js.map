{"version":3,"sources":["queue.controller.js"],"names":["Queue","require","request","registerQueue","req","res","stationname","arrivaltime","leavetime","status","vehicleType","queue","regeneratorRuntime","async","_context","prev","next","body","awrap","save","sent","abrupt","send","message","t0","console","log","response","stop","updateTime","ID","changeTime","_context2","params","id","findOneAndUpdate","deletequeue","queueid","_context3","findOneAndDelete","getcount","value","_context4","trim","count","$regex","$options","then","queues","json","getcountststus","_context5","find","module","exports"],"mappings":"aAAA,IAAMA,MAAQC,QAAQ,kCACFA,QAAQ,WAApBC,iBAAAA,QAEFC,cAAgB,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAFdd,EAAAA,EAAAA,KAIyBI,YACvBC,EAAcH,EAAIa,KAAKV,YAH3BJ,EAAgBC,EAAAa,KAAhBd,UAAgBM,EAAAL,EAAAa,KAAAR,OAAAC,EAAAN,EAAAa,KAAAP,YAAAC,EAAA,IAAAX,MAAA,CAEZM,YAAAA,EACAC,YAAAA,EACAC,UAAAA,EACAC,OAAAA,EACAC,YAAAA,IANYI,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAM,MASMP,EAAAQ,QATN,KAAA,EAAA,GAAAL,EAAAM,KAAA,OAAAN,EAAAO,OAAA,SAAAhB,EAAAI,OAAA,KAAAa,KAAA,CAAAC,QAAA,qCAAAT,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAO,OAAA,SAAAhB,EAAAI,OAAA,KAAAa,KAAA,CAAAC,QAAA,2BAAA,KAAA,GAAAT,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,MAAA,GAAAW,QAAAC,IAAAZ,EAAAU,IAAAV,EAAAO,OAAA,SAmBVM,EAnBUlB,OAAA,KAAAa,KAAA,CAAAC,QAAA,oCAAA,KAAA,GAAA,IAAA,MAAA,OAAAT,EAAAc,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAiChBC,WAAa,SAAOzB,EAAKC,GAAZ,IAAAyB,EAAAC,EAAA,OAAAnB,mBAAAC,MAAA,SAAAmB,GAAA,OAAA,OAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,KAAA,EAAA,OAjCGc,EAAA1B,EAAA6B,OAAAC,GAqBkBH,EArBlB,CAqCdzB,YAAcF,EAAIa,KAAKX,YArCTC,YAAAH,EAAAa,KAAAV,YAAAC,UAAAJ,EAAAa,KAAAT,UAuBmBe,OAAAA,EAASN,KAAAR,OAAVC,YAvBlBN,EAAAa,KAAAP,aAiCHsB,EAAAjB,KAAA,EAAAiB,EAAAhB,KAAA,EAAAJ,mBAAAM,MAjCGlB,MAAAmC,iBAAA,CAAAL,GAAAA,GAAAC,IAiCH,KAAA,EAAA,GAAAC,EAAAZ,KAAA,OAAAY,EAAAX,OAAA,SAjCGhB,EAAAI,OAAA,KAAAa,KAAA,CAAAC,QAAA,8BAiCHS,EAAAhB,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgB,EAAAX,OAAA,SAPXI,EAAQC,OAAR,KAAAJ,KAAA,CAAAC,QAAA,2BAOW,KAAA,GAAAS,EAAAhB,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgB,EAAAjB,KAAA,GAAAiB,EAAAR,GAAAQ,EAAA,MAAA,GAAAA,EAAAX,OAAA,SAqBJhB,EAAII,OAAO,KAAKa,KAAK,CAAEC,QAAS,sBArB5B,KAAA,GAAA,IAAA,MAAA,OAAAS,EAAAJ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAjCGQ,YAAA,SAAAhC,EAAAC,GAAA,IAAAgC,EAAA,OAAAzB,mBAAAC,MAAA,SAAAyB,GAAA,OAAA,OAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,KAAA,EAAA,OAAAqB,EAAAjC,EAAA6B,OAAAI,QAAAC,EAAAvB,KAAA,EAAAuB,EAAAtB,KAAA,EAAAJ,mBAAAM,MA8DSlB,MAAMuC,iBAAiB,CAAEF,QAAQA,KA9D1C,KAAA,EAAA,GAAAC,EAAAlB,KAAA,OAAAkB,EAAAjB,OAAA,SAiCHhB,EAAAI,OAAA,KAAAa,KAAA,CAAAC,QAAA,4CAjCGe,EAAAtB,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAsB,EAAAjB,OAAA,SAiCHhB,EAAAI,OAAA,KAAAa,KAAA,CAAAC,QAAA,yCAjCG,KAAA,GAAAe,EAAAtB,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAsB,EAAAvB,KAAA,GAAAuB,EAAAd,GAAAc,EAAA,MAAA,GAAAA,EAAAjB,OAAA,SAqCdf,EAAAA,OAAcF,KAAIa,KAAKX,CAAAA,QADR,2BApCD,KAAA,GAAA,IAAA,MAAA,OAAAgC,EAAAV,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAoCCY,SAHJ,SAAApC,EAAAC,GAAA,IAAAoC,EAAA,OAAA7B,mBAAAC,MAAA,SAAA6B,GAAA,OAAA,OAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,KAAA,EAAA,OAAAyB,EAAArC,EAAA6B,OAAAvB,YAAAiC,OAAAD,EAAA3B,KAAA,EAAA2B,EAAA1B,KAAA,EAAAJ,mBAAAM,MAYyCY,MAAAA,QAZzC,KAAA,EAAA,IAAAY,EAAAtB,KAAA,CAAAsB,EAAA1B,KAAA,EAAA,MAiDPhB,MAAM4C,MAAM,CAAClC,YAAa,CAACmC,OAAQ,IAAMJ,EAAQ,KAAMK,SAAU,OAASC,KAAK,SAACC,GAjDzE3C,EAAA4C,KAAAD,KAAAN,EAAA1B,KAAA,GAAA,MAAA,KAAA,EAAA,OAAA0B,EAAArB,OAAA,SAAAhB,EAAAI,OAAA,KAAAa,KAAA,CAAAC,QAAA,gCAAA,KAAA,GAAAmB,EAAA1B,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA0B,EAAA3B,KAAA,GAAA2B,EAAAlB,GAAAkB,EAAA,MAAA,GAAAA,EAAArB,OAAA,SAyDJhB,EAAII,OAAO,KAAKa,KAAK,CAAEC,QAAS,2BAzD5B,KAAA,GAAA,IAAA,MAAA,OAAAmB,EAAAd,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA6DbsB,eAAiB,SAAO9C,EAAKC,GAAZ,IAAAoC,EAAA,OAAA7B,mBAAAC,MAAA,SAAAsC,GAAA,OAAA,OAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,KAAA,EAAA,OA7DJyB,EAAArC,EAAA6B,OAAAxB,OAAAkC,OA6DIQ,EAAApC,KAAA,EAAAoC,EAAAnC,KAAA,EAAAJ,mBAAAM,MA7DJlB,MAAAoD,QA6DI,KAAA,EAAA,IAAAD,EAAA/B,KAAA,CAAA+B,EAAAnC,KAAA,EAAA,MA7DJhB,MAAA4C,MAAA,CAAAnC,OAAA,CAAAoC,OAAA,IAAAJ,EAAA,KAAAK,SAAA,OAAAC,KAAA,SAAAC,GAAA3C,EAAA4C,KAAAD,KA6DIG,EAAAnC,KAAA,GAAA,MAAA,KAAA,EAAA,OAAAmC,EAAA9B,OAAA,SA7DJhB,EAAAI,OAAA,KAAAa,KAAA,CAAAC,QAAA,+BA6DI,KAAA,GAAA4B,EAAAnC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAmC,EAAApC,KAAA,GAAAoC,EAAA3B,GAAA2B,EAAA,MAAA,GAAAA,EAAA9B,OAAA,SAxCeE,EAAOd,OAAE,KAAAa,KAAA,CAAAC,QAAA,2BAwCxB,KAAA,GAAA,IAAA,MAAA,OAAA4B,EAAAvB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA7DJyB,OAAAC,QAAA,CAAAnD,cAAAA,cAAAiC,YAAAA,YAAAI,SAAAA,SAAnBX,WAAAA,WAqFIqB,eAAAA","file":"queue.controller.min.js","sourcesContent":["const Queue = require('../models/queue.model');\r\nconst { request } = require('express')\r\n\r\nconst registerQueue = async (req, res) => {\r\n\r\n    const stationname = req.body.stationname;\r\n    const arrivaltime = req.body.arrivaltime;\r\n    const leavetime = req.body.leavetime;\r\n    const status = req.body.status;\r\n    const vehicleType = req.body.vehicleType;\r\n\r\n\r\n    const queue = new Queue({\r\n        stationname,\r\n        arrivaltime,\r\n        leavetime,\r\n        status,\r\n        vehicleType\r\n\r\n    })\r\n\r\n    try{\r\n        let response = await queue.save();\r\n        if(response) {\r\n            return res.status(201).send({message: \"New customer added to the queue\"})\r\n        }else {\r\n            return res.status(500).send({message: \"Internal server error\"});\r\n        }\r\n    }catch (error) {\r\n        console.log(error);\r\n        return res.status(400).send({message: \"Error while entering the queue\"})\r\n\r\n    }\r\n\r\n}\r\n\r\nconst updateTime = async (req, res) => {\r\n    const ID = req.params.id;\r\n\r\n    const changeTime = {\r\n        stationname : req.body.stationname,\r\n        arrivaltime : req.body.arrivaltime,\r\n        leavetime : req.body.leavetime,\r\n        status : req.body.status,\r\n        vehicleType : req.body.vehicleType,\r\n    }\r\n\r\n    try {\r\n        const response = await Queue.findOneAndUpdate({ ID: ID } , changeTime);\r\n        if(response){\r\n            return res.status(200).send({message: 'Successfully update time'})\r\n        }else {\r\n\r\n        return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update' })\r\n    }\r\n}\r\n\r\nconst deletequeue = async (req, res) => {\r\n    const queueid = req.params.queueid;\r\n\r\n    try {\r\n        const customer = await Queue.findOneAndDelete({ queueid:queueid });\r\n        if(customer){\r\n\r\n         return res.status(204).send({ message: 'Successfully deleted A User from queue' });\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not remove the queue' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n\r\n}\r\n\r\nconst getcount = async (req, res) => {\r\n    let value = req.params.vehicleType.trim();\r\n\r\n    try {\r\n        let queue = await Queue.find();\r\n        if(queue){\r\n            Queue.count({vehicleType: {$regex: \"^\" + value + \".*\", $options: 'i' } }).then((queues) => {\r\n                res.json(queues)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such vehicle type found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst getcountststus = async (req, res) => {\r\n    let value = req.params.status.trim();\r\n\r\n    try {\r\n        let queue = await Queue.find();\r\n        if(queue){\r\n            Queue.count({status: {$regex: \"^\" + value + \".*\", $options: 'i' } }).then((queues) => {\r\n                res.json(queues)\r\n        \r\n            })\r\n        }else {\r\n            return res.status(404).send({ message: 'No such user in the queue' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    registerQueue,\r\n    deletequeue,\r\n    getcount,\r\n    updateTime,\r\n    getcountststus\r\n}"]}